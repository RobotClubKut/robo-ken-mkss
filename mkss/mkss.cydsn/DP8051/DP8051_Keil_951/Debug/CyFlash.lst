C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFLASH
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\CyFlash.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\CyFlash.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(DEBUG)
                    - WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/CyFlash.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\CyFlash.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: CyFlash.c
   3          * Version 5.20
   4          *
   5          *  Description:
   6          *   Provides an API for the FLASH/EEPROM.
   7          *
   8          *  Note:
   9          *   This code is endian agnostic.
  10          *
  11          *  Note:
  12          *   Documentation of the API's in this file is located in the
  13          *   System Reference Guide provided with PSoC Creator.
  14          *
  15          ********************************************************************************
  16          * Copyright 2008-2015, Cypress Semiconductor Corporation. All rights reserved.
  17          * You may use this file only in accordance with the license, terms, conditions,
  18          * disclaimers, and limitations in the end user license agreement accompanying
  19          * the software package with which this file was provided.
  20          *******************************************************************************/
  21          
  22          #include "CyFlash.h"
  23          
  24          /*  The number of EEPROM arrays */
  25          #define CY_FLASH_EEPROM_NUMBER_ARRAYS                 (1u)
  26          
  27          
  28          /*******************************************************************************
  29          * Holds the die temperature, updated by CySetTemp(). Used for flash writing.
  30          * The first byte is the sign of the temperature (0 = negative, 1 = positive).
  31          * The second byte is the magnitude.
  32          *******************************************************************************/
  33          uint8 dieTemperature[CY_FLASH_DIE_TEMP_DATA_SIZE];
  34          
  35          #if(CYDEV_ECC_ENABLE == 0)
  36              static uint8 * rowBuffer = 0;
  37          #endif  /* (CYDEV_ECC_ENABLE == 0) */
  38          
  39          
  40          static cystatus CySetTempInt(void);
  41          static cystatus CyFlashGetSpcAlgorithm(void);
  42          
  43          
  44          /*******************************************************************************
  45          * Function Name: CyFlash_Start
  46          ********************************************************************************
  47          *
  48          * Summary:
  49          *  Enable the Flash.
  50          *
  51          * Parameters:
  52          *  None
  53          *
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 2   

  54          * Return:
  55          *  None
  56          *
  57          *******************************************************************************/
  58          void CyFlash_Start(void) 
  59          {
  60   1          uint8 interruptState;
  61   1      
  62   1          interruptState = CyEnterCriticalSection();
  63   1      
  64   1      
  65   1          /***************************************************************************
  66   1          * Enable SPC clock. This also internally enables the 36MHz IMO, since this
  67   1          * is required for the SPC to function.
  68   1          ***************************************************************************/
  69   1          CY_FLASH_PM_ACT_CFG0_REG    |= CY_FLASH_PM_ACT_CFG0_EN_CLK_SPC;
  70   1          CY_FLASH_PM_ALTACT_CFG0_REG |= CY_FLASH_PM_ALTACT_CFG0_EN_CLK_SPC;
  71   1      
  72   1      
  73   1          /***************************************************************************
  74   1          * The wake count defines the number of Bus Clock cycles it takes for the
  75   1          * flash or eeprom to wake up from a low power mode independent of the chip
  76   1          * power mode. Wake up time for these blocks is 5 us.
  77   1          * The granularity of this register is 2 Bus Clock cycles, so a value of 0x1E
  78   1          * (30d) defines the wake up time as 60 cycles of the Bus Clock.
  79   1          * This register needs to be written with a value dependent on the Bus Clock
  80   1          * frequency so that the duration of the cycles is equal to or greater than
  81   1          * the 5 us delay required.
  82   1          ***************************************************************************/
  83   1          CY_FLASH_SPC_FM_EE_WAKE_CNT_REG = CY_FLASH_SPC_FM_EE_WAKE_CNT_80MHZ;
  84   1      
  85   1      
  86   1          /***************************************************************************
  87   1          * Enable flash. Active flash macros consume current, but re-enabling a
  88   1          * disabled flash macro takes 5us. If the CPU attempts to fetch out of the
  89   1          * macro during that time, it will be stalled. This bit allows the flash to
  90   1          * be enabled even if the CPU is disabled, which allows a quicker return to
  91   1          * code execution.
  92   1          ***************************************************************************/
  93   1          CY_FLASH_PM_ACT_CFG12_REG    |= CY_FLASH_PM_ACT_CFG12_EN_FM;
  94   1          CY_FLASH_PM_ALTACT_CFG12_REG |= CY_FLASH_PM_ALTACT_CFG12_EN_FM;
  95   1      
  96   1          while(0u == (CY_FLASH_SPC_FM_EE_CR_REG & CY_FLASH_EE_EE_AWAKE))
  97   1          {
  98   2              /* Non-zero status denotes that the EEPROM/Flash is awake & powered. */
  99   2          }
 100   1      
 101   1          CyExitCriticalSection(interruptState);
 102   1      }
 103          
 104          
 105          /*******************************************************************************
 106          * Function Name: CyFlash_Stop
 107          ********************************************************************************
 108          *
 109          * Summary:
 110          *  Disable the Flash.
 111          *
 112          * Parameters:
 113          *  None
 114          *
 115          * Return:
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 3   

 116          *  None
 117          *
 118          * Side Effects:
 119          *  This setting is ignored as long as the CPU is currently running.  This will
 120          *  only take effect when the CPU is later disabled.
 121          *
 122          *******************************************************************************/
 123          void CyFlash_Stop(void) 
 124          {
 125   1          uint8 interruptState;
 126   1      
 127   1          interruptState = CyEnterCriticalSection();
 128   1      
 129   1          CY_FLASH_PM_ACT_CFG12_REG    &= ((uint8)(~CY_FLASH_PM_ACT_CFG12_EN_FM));
 130   1          CY_FLASH_PM_ALTACT_CFG12_REG &= ((uint8)(~CY_FLASH_PM_ALTACT_CFG12_EN_FM));
 131   1      
 132   1          CyExitCriticalSection(interruptState);
 133   1      }
 134          
 135          
 136          /*******************************************************************************
 137          * Function Name: CySetTempInt
 138          ********************************************************************************
 139          *
 140          * Summary:
 141          *  Sends a command to the SPC to read the die temperature. Sets a global value
 142          *  used by the Write function. This function must be called once before
 143          *  executing a series of Flash writing functions.
 144          *
 145          * Parameters:
 146          *  None
 147          *
 148          * Return:
 149          *  status:
 150          *   CYRET_SUCCESS - if successful
 151          *   CYRET_LOCKED  - if Flash writing already in use
 152          *   CYRET_UNKNOWN - if there was an SPC error
 153          *
 154          *******************************************************************************/
 155          static cystatus CySetTempInt(void) 
 156          {
 157   1          cystatus status;
 158   1      
 159   1          /* Make sure SPC is powered */
 160   1          CySpcStart();
 161   1      
 162   1          /* Plan for failure. */
 163   1          status = CYRET_UNKNOWN;
 164   1      
 165   1          if(CySpcLock() == CYRET_SUCCESS)
 166   1          {
 167   2              /* Write the command. */
 168   2              if(CYRET_STARTED == CySpcGetTemp(CY_TEMP_NUMBER_OF_SAMPLES))
 169   2              {
 170   3                  do
 171   3                  {
 172   4                      if(CySpcReadData(dieTemperature, CY_FLASH_DIE_TEMP_DATA_SIZE) == CY_FLASH_DIE_TEMP_DATA_SI
             -ZE)
 173   4                      {
 174   5                          status = CYRET_SUCCESS;
 175   5      
 176   5                          while(CY_SPC_BUSY)
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 4   

 177   5                          {
 178   6                              /* Spin until idle. */
 179   6                              CyDelayUs(1u);
 180   6                          }
 181   5                          break;
 182   5                      }
 183   4      
 184   4                  } while(CY_SPC_BUSY);
 185   3              }
 186   2      
 187   2              CySpcUnlock();
 188   2          }
 189   1          else
 190   1          {
 191   2              status = CYRET_LOCKED;
 192   2          }
 193   1      
 194   1          return (status);
 195   1      }
 196          
 197          
 198          /*******************************************************************************
 199          * Function Name: CyFlashGetSpcAlgorithm
 200          ********************************************************************************
 201          *
 202          * Summary:
 203          *  Sends a command to the SPC to download code into RAM.
 204          *
 205          * Parameters:
 206          *  None
 207          *
 208          * Return:
 209          *  status:
 210          *   CYRET_SUCCESS - if successful
 211          *   CYRET_LOCKED  - if Flash writing already in use
 212          *   CYRET_UNKNOWN - if there was an SPC error
 213          *
 214          *******************************************************************************/
 215          static cystatus CyFlashGetSpcAlgorithm(void) 
 216          {
 217   1          cystatus status;
 218   1      
 219   1          /* Make sure SPC is powered */
 220   1          CySpcStart();
 221   1      
 222   1          if(CySpcLock() == CYRET_SUCCESS)
 223   1          {
 224   2              status = CySpcGetAlgorithm();
 225   2      
 226   2              if(CYRET_STARTED == status)
 227   2              {
 228   3                  while(CY_SPC_BUSY)
 229   3                  {
 230   4                      /* Spin until idle. */
 231   4                      CyDelayUs(1u);
 232   4                  }
 233   3      
 234   3                  if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 235   3                  {
 236   4                      status = CYRET_SUCCESS;
 237   4                  }
 238   3              }
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 5   

 239   2              CySpcUnlock();
 240   2          }
 241   1          else
 242   1          {
 243   2              status = CYRET_LOCKED;
 244   2          }
 245   1      
 246   1          return (status);
 247   1      }
 248          
 249          
 250          /*******************************************************************************
 251          * Function Name: CySetTemp
 252          ********************************************************************************
 253          *
 254          * Summary:
 255          *  This is a wraparound for CySetTempInt(). It is used to return the second
 256          *  successful read of the temperature value.
 257          *
 258          * Parameters:
 259          *  None
 260          *
 261          * Return:
 262          *  status:
 263          *   CYRET_SUCCESS if successful.
 264          *   CYRET_LOCKED  if Flash writing already in use
 265          *   CYRET_UNKNOWN if there was an SPC error.
 266          *
 267          *  uint8 dieTemperature[2]:
 268          *   Holds the die temperature for the flash writing algorithm. The first byte is
 269          *   the sign of the temperature (0 = negative, 1 = positive). The second byte is
 270          *   the magnitude.
 271          *
 272          *******************************************************************************/
 273          cystatus CySetTemp(void) 
 274          {
 275   1          cystatus status = CyFlashGetSpcAlgorithm();
 276   1      
 277   1          if(status == CYRET_SUCCESS)
 278   1          {
 279   2              status = CySetTempInt();
 280   2          }
 281   1      
 282   1          return (status);
 283   1      }
 284          
 285          
 286          /*******************************************************************************
 287          * Function Name: CySetFlashEEBuffer
 288          ********************************************************************************
 289          *
 290          * Summary:
 291          *  Sets the user supplied temporary buffer to store SPC data while performing
 292          *  Flash and EEPROM commands. This buffer is only necessary when the Flash ECC
 293          *  is disabled.
 294          *
 295          * Parameters:
 296          *  buffer:
 297          *   The address of a block of memory to store temporary memory. The size of the
 298          *   block of memory is CYDEV_FLS_ROW_SIZE + CYDEV_ECC_ROW_SIZE.
 299          *
 300          * Return:
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 6   

 301          *  status:
 302          *   CYRET_SUCCESS if successful.
 303          *   CYRET_BAD_PARAM if the buffer is NULL
 304          *
 305          *******************************************************************************/
 306          cystatus CySetFlashEEBuffer(uint8 * buffer) 
 307          {
 308   1          cystatus status = CYRET_SUCCESS;
 309   1      
 310   1          CySpcStart();
 311   1      
 312   1          #if(CYDEV_ECC_ENABLE == 0)
 313   1      
 314   1              if(NULL == buffer)
 315   1              {
 316   2                  rowBuffer = rowBuffer;
 317   2                  status = CYRET_BAD_PARAM;
 318   2              }
 319   1              else if(CySpcLock() != CYRET_SUCCESS)
 320   1              {
 321   2                  rowBuffer = rowBuffer;
 322   2                  status = CYRET_LOCKED;
 323   2              }
 324   1              else
 325   1              {
 326   2                  rowBuffer = buffer;
 327   2                  CySpcUnlock();
 328   2              }
 329   1      
 330   1          #else
              
                      /* To suppress warning */
                      buffer = buffer;
              
                  #endif  /* (CYDEV_ECC_ENABLE == 0u) */
 336   1      
 337   1          return(status);
 338   1      }
 339          
 340          
 341          /*******************************************************************************
 342          * Function Name: CyWriteRowData
 343          ********************************************************************************
 344          *
 345          * Summary:
 346          *  Sends a command to the SPC to load and program a row of data in
 347          *  Flash or EEPROM.
 348          *
 349          * Parameters:
 350          *  arrayID:    ID of the array to write.
 351          *   The type of write, Flash or EEPROM, is determined from the array ID.
 352          *   The arrays in the part are sequential starting at the first ID for the
 353          *   specific memory type. The array ID for the Flash memory lasts from 0x00 to
 354          *   0x3F and for the EEPROM memory it lasts from 0x40 to 0x7F.
 355          *  rowAddress: rowAddress of flash row to program.
 356          *  rowData:    Array of bytes to write.
 357          *
 358          * Return:
 359          *  status:
 360          *   CYRET_SUCCESS if successful.
 361          *   CYRET_LOCKED if the SPC is already in use.
 362          *   CYRET_CANCELED if command not accepted
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 7   

 363          *   CYRET_UNKNOWN if there was an SPC error.
 364          *
 365          *******************************************************************************/
 366          cystatus CyWriteRowData(uint8 arrayId, uint16 rowAddress, const uint8 * rowData) 
 367          {
 368   1          uint16 rowSize;
 369   1          cystatus status;
 370   1      
 371   1          rowSize = (arrayId > CY_SPC_LAST_FLASH_ARRAYID) ? CYDEV_EEPROM_ROW_SIZE : CYDEV_FLS_ROW_SIZE;
 372   1          status = CyWriteRowFull(arrayId, rowAddress, rowData, rowSize);
 373   1      
 374   1          return(status);
 375   1      }
 376          
 377          
 378          /*******************************************************************
 379          * If "Enable Error Correcting Code (ECC)" and "Store Configuration
 380          * Data in ECC" DWR options are disabled, ECC section is available
 381          * for user data.
 382          *******************************************************************/
 383          #if ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u))
              
                  /*******************************************************************************
                  * Function Name: CyWriteRowConfig
                  ********************************************************************************
                  *
                  * Summary:
                  *  Sends a command to the SPC to load and program a row of config data in the
                  *  Flash. This function is only valid for Flash array IDs (not for EEPROM).
                  *
                  * Parameters:
                  *  arrayId:      ID of the array to write
                  *   The arrays in the part are sequential starting at the first ID for the
                  *   specific memory type. The array ID for the Flash memory lasts
                  *   from 0x00 to 0x3F.
                  *  rowAddress:   The address of the sector to erase.
                  *  rowECC:       The array of bytes to write.
                  *
                  * Return:
                  *  status:
                  *   CYRET_SUCCESS if successful.
                  *   CYRET_LOCKED if the SPC is already in use.
                  *   CYRET_CANCELED if command not accepted
                  *   CYRET_UNKNOWN if there was an SPC error.
                  *
                  *******************************************************************************/
                  cystatus CyWriteRowConfig(uint8 arrayId, uint16 rowAddress, const uint8 * rowECC)\
                  
                  {
                      cystatus status;
              
                      status = CyWriteRowFull(arrayId, rowAddress, rowECC, CYDEV_ECC_ROW_SIZE);
              
                      return (status);
                  }
              
              #endif  /* ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u)) */
 420          
 421          
 422          
 423          /*******************************************************************************
 424          * Function Name: CyWriteRowFull
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 8   

 425          ********************************************************************************
 426          * Summary:
 427          *  Sends a command to the SPC to load and program a row of data in the Flash.
 428          *  rowData array is expected to contain Flash and ECC data if needed.
 429          *
 430          * Parameters:
 431          *  arrayId:    FLASH or EEPROM array id.
 432          *  rowData:    Pointer to a row of data to write.
 433          *  rowNumber:  Zero based number of the row.
 434          *  rowSize:    Size of the row.
 435          *
 436          * Return:
 437          *  CYRET_SUCCESS if successful.
 438          *  CYRET_LOCKED if the SPC is already in use.
 439          *  CYRET_CANCELED if command not accepted
 440          *  CYRET_UNKNOWN if there was an SPC error.
 441          *
 442          *******************************************************************************/
 443          cystatus CyWriteRowFull(uint8 arrayId, uint16 rowNumber, const uint8* rowData, uint16 rowSize) \
 444                  
 445          {
 446   1          cystatus status = CYRET_SUCCESS;
 447   1      
 448   1          if((arrayId <=  CY_SPC_LAST_FLASH_ARRAYID) && (arrayId > (CY_FLASH_NUMBER_ARRAYS  + CY_SPC_FIRST_FLASH
             -_ARRAYID)))
 449   1          {
 450   2              status = CYRET_BAD_PARAM;
 451   2          }
 452   1      
 453   1          if(arrayId > CY_SPC_LAST_EE_ARRAYID)
 454   1          {
 455   2              status = CYRET_BAD_PARAM;
 456   2          }
 457   1      
 458   1          if((arrayId >= CY_SPC_FIRST_EE_ARRAYID) && (arrayId > (CY_FLASH_EEPROM_NUMBER_ARRAYS + CY_SPC_FIRST_EE
             -_ARRAYID)))
 459   1          {
 460   2              status = CYRET_BAD_PARAM;
 461   2          }
 462   1      
 463   1          if(arrayId <=  CY_SPC_LAST_FLASH_ARRAYID)
 464   1          {
 465   2              /* Flash */
 466   2              if(rowNumber > (CY_FLASH_NUMBER_ROWS/CY_FLASH_NUMBER_ARRAYS))
 467   2              {
 468   3                  status = CYRET_BAD_PARAM;
 469   3              }
 470   2          }
 471   1          else
 472   1          {
 473   2              /* EEPROM */
 474   2              if(rowNumber > (CY_EEPROM_NUMBER_ROWS/CY_FLASH_EEPROM_NUMBER_ARRAYS))
 475   2              {
 476   3                  status = CYRET_BAD_PARAM;
 477   3              }
 478   2      
 479   2              if(CY_EEPROM_SIZEOF_ROW != rowSize)
 480   2              {
 481   3                  status = CYRET_BAD_PARAM;
 482   3              }
 483   2          }
 484   1      
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 9   

 485   1          if(rowData == NULL)
 486   1          {
 487   2              status = CYRET_BAD_PARAM;
 488   2          }
 489   1      
 490   1      
 491   1          if(status == CYRET_SUCCESS)
 492   1          {
 493   2              if(CySpcLock() == CYRET_SUCCESS)
 494   2              {
 495   3                  /* Load row data into SPC internal latch */
 496   3                  status = CySpcLoadRowFull(arrayId, rowNumber, rowData, rowSize);
 497   3      
 498   3                  if(CYRET_STARTED == status)
 499   3                  {
 500   4                      while(CY_SPC_BUSY)
 501   4                      {
 502   5                          /* Wait for SPC to finish and get SPC status */
 503   5                          CyDelayUs(1u);
 504   5                      }
 505   4      
 506   4                      /* Hide SPC status */
 507   4                      if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 508   4                      {
 509   5                          status = CYRET_SUCCESS;
 510   5                      }
 511   4                      else
 512   4                      {
 513   5                          status = CYRET_UNKNOWN;
 514   5                      }
 515   4      
 516   4                      if(CYRET_SUCCESS == status)
 517   4                      {
 518   5                          /* Erase and program flash with data from SPC interval latch */
 519   5                          status = CySpcWriteRow(arrayId, rowNumber, dieTemperature[0u], dieTemperature[1u]);
 520   5      
 521   5                          if(CYRET_STARTED == status)
 522   5                          {
 523   6                              while(CY_SPC_BUSY)
 524   6                              {
 525   7                                  /* Wait for SPC to finish and get SPC status */
 526   7                                  CyDelayUs(1u);
 527   7                              }
 528   6      
 529   6                              /* Hide SPC status */
 530   6                              if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 531   6                              {
 532   7                                  status = CYRET_SUCCESS;
 533   7                              }
 534   6                              else
 535   6                              {
 536   7                                  status = CYRET_UNKNOWN;
 537   7                              }
 538   6                          }
 539   5                      }
 540   4                  }
 541   3                  CySpcUnlock();
 542   3              }   /* if(CySpcLock() == CYRET_SUCCESS) */
 543   2              else
 544   2              {
 545   3                  status = CYRET_LOCKED;
 546   3              }
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 10  

 547   2          }
 548   1      
 549   1          return(status);
 550   1      }
 551          
 552          
 553          /*******************************************************************************
 554          * Function Name: CyFlash_SetWaitCycles
 555          ********************************************************************************
 556          *
 557          * Summary:
 558          *  Sets the number of clock cycles the cache will wait before it samples data
 559          *  coming back from the Flash. This function must be called before increasing
 560          *  the CPU clock frequency. It can optionally be called after lowering the CPU
 561          *  clock frequency in order to improve the CPU performance.
 562          *
 563          * Parameters:
 564          *  uint8 freq:
 565          *   Frequency of operation in Megahertz.
 566          *
 567          * Return:
 568          *  None
 569          *
 570          *******************************************************************************/
 571          void CyFlash_SetWaitCycles(uint8 freq) 
 572          {
 573   1          uint8 interruptState;
 574   1      
 575   1          /* Save current global interrupt enable and disable it */
 576   1          interruptState = CyEnterCriticalSection();
 577   1      
 578   1          /***************************************************************************
 579   1          * The number of clock cycles the cache will wait before it samples data
 580   1          * coming back from the Flash must be equal or greater to to the CPU frequency
 581   1          * outlined in clock cycles.
 582   1          ***************************************************************************/
 583   1      
 584   1          if (freq < CY_FLASH_CACHE_WS_1_FREQ_MAX)
 585   1          {
 586   2              CY_FLASH_CONTROL_REG = (CY_FLASH_CONTROL_REG & (uint8)(~CY_FLASH_CACHE_WS_VALUE_MASK)) |
 587   2                                          CY_FLASH_CACHE_WS_1_VALUE_MASK;
 588   2          }
 589   1          else if (freq < CY_FLASH_CACHE_WS_2_FREQ_MAX)
 590   1          {
 591   2              CY_FLASH_CONTROL_REG = (CY_FLASH_CONTROL_REG & (uint8)(~CY_FLASH_CACHE_WS_VALUE_MASK)) |
 592   2                                          CY_FLASH_CACHE_WS_2_VALUE_MASK;
 593   2          }
 594   1          else if (freq < CY_FLASH_CACHE_WS_3_FREQ_MAX)
 595   1          {
 596   2              CY_FLASH_CONTROL_REG = (CY_FLASH_CONTROL_REG & (uint8)(~CY_FLASH_CACHE_WS_VALUE_MASK)) |
 597   2                                          CY_FLASH_CACHE_WS_3_VALUE_MASK;
 598   2          }
 599   1      #if (CY_PSOC5)
                  else if (freq < CY_FLASH_CACHE_WS_4_FREQ_MAX)
                  {
                      CY_FLASH_CONTROL_REG = (CY_FLASH_CONTROL_REG & (uint8)(~CY_FLASH_CACHE_WS_VALUE_MASK)) |
                                                  CY_FLASH_CACHE_WS_4_VALUE_MASK;
                  }
                  else if (freq <= CY_FLASH_CACHE_WS_5_FREQ_MAX)
                  {
                      CY_FLASH_CONTROL_REG = (CY_FLASH_CONTROL_REG & (uint8)(~CY_FLASH_CACHE_WS_VALUE_MASK)) |
                                                  CY_FLASH_CACHE_WS_5_VALUE_MASK;
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 11  

                  }
              #endif  /* (CY_PSOC5) */
 611   1          else
 612   1          {
 613   2              /* Halt CPU in debug mode if frequency is invalid */
 614   2              CYASSERT(0u != 0u);
 615   2          }
 616   1      
 617   1          /* Restore global interrupt enable state */
 618   1          CyExitCriticalSection(interruptState);
 619   1      }
 620          
 621          
 622          /*******************************************************************************
 623          * Function Name: CyEEPROM_Start
 624          ********************************************************************************
 625          *
 626          * Summary:
 627          *  Enable the EEPROM.
 628          *
 629          * Parameters:
 630          *  None
 631          *
 632          * Return:
 633          *  None
 634          *
 635          *******************************************************************************/
 636          void CyEEPROM_Start(void) 
 637          {
 638   1          uint8 interruptState;
 639   1      
 640   1          interruptState = CyEnterCriticalSection();
 641   1      
 642   1      
 643   1          /***************************************************************************
 644   1          * Enable SPC clock. This also internally enables the 36MHz IMO, since this
 645   1          * is required for the SPC to function.
 646   1          ***************************************************************************/
 647   1          CY_FLASH_PM_ACT_CFG0_REG    |= CY_FLASH_PM_ACT_CFG0_EN_CLK_SPC;
 648   1          CY_FLASH_PM_ALTACT_CFG0_REG |= CY_FLASH_PM_ALTACT_CFG0_EN_CLK_SPC;
 649   1      
 650   1      
 651   1          /***************************************************************************
 652   1          * The wake count defines the number of Bus Clock cycles it takes for the
 653   1          * flash or EEPROM to wake up from a low power mode independent of the chip
 654   1          * power mode. Wake up time for these blocks is 5 us.
 655   1          * The granularity of this register is 2 Bus Clock cycles, so a value of 0x1E
 656   1          * (30d) defines the wake up time as 60 cycles of the Bus Clock.
 657   1          * This register needs to be written with a value dependent on the Bus Clock
 658   1          * frequency so that the duration of the cycles is equal to or greater than
 659   1          * the 5 us delay required.
 660   1          ***************************************************************************/
 661   1          CY_FLASH_SPC_FM_EE_WAKE_CNT_REG = CY_FLASH_SPC_FM_EE_WAKE_CNT_80MHZ;
 662   1      
 663   1      
 664   1          /***************************************************************************
 665   1          * Enable EEPROM. Re-enabling an EEPROM macro takes 5us. During this time,
 666   1          * the EE will not acknowledge a PHUB request.
 667   1          ***************************************************************************/
 668   1          CY_FLASH_PM_ACT_CFG12_REG    |= CY_FLASH_PM_ACT_CFG12_EN_EE;
 669   1          CY_FLASH_PM_ALTACT_CFG12_REG |= CY_FLASH_PM_ALTACT_CFG12_EN_EE;
 670   1      
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 12  

 671   1          while(0u == (CY_FLASH_SPC_FM_EE_CR_REG & CY_FLASH_EE_EE_AWAKE))
 672   1          {
 673   2              /* Non-zero status denotes that the EEPROM/Flash is awake & powered. */
 674   2          }
 675   1      
 676   1          CyExitCriticalSection(interruptState);
 677   1      }
 678          
 679          
 680          /*******************************************************************************
 681          * Function Name: CyEEPROM_Stop
 682          ********************************************************************************
 683          *
 684          * Summary:
 685          *  Disable the EEPROM.
 686          *
 687          * Parameters:
 688          *  None
 689          *
 690          * Return:
 691          *  None
 692          *
 693          *******************************************************************************/
 694          void CyEEPROM_Stop (void) 
 695          {
 696   1          uint8 interruptState;
 697   1      
 698   1          interruptState = CyEnterCriticalSection();
 699   1      
 700   1          CY_FLASH_PM_ACT_CFG12_REG    &= ((uint8)(~CY_FLASH_PM_ACT_CFG12_EN_EE));
 701   1          CY_FLASH_PM_ALTACT_CFG12_REG &= ((uint8)(~CY_FLASH_PM_ALTACT_CFG12_EN_EE));
 702   1      
 703   1          CyExitCriticalSection(interruptState);
 704   1      }
 705          
 706          
 707          /*******************************************************************************
 708          * Function Name: CyEEPROM_ReadReserve
 709          ********************************************************************************
 710          *
 711          * Summary:
 712          *  Request access to the EEPROM for reading and wait until access is available.
 713          *
 714          * Parameters:
 715          *  None
 716          *
 717          * Return:
 718          *  None
 719          *
 720          *******************************************************************************/
 721          void CyEEPROM_ReadReserve(void) 
 722          {
 723   1          /* Make request for PHUB to have access */
 724   1          CY_FLASH_EE_SCR_REG |= CY_FLASH_EE_SCR_AHB_EE_REQ;
 725   1      
 726   1          while (0u == (CY_FLASH_EE_SCR_REG & CY_FLASH_EE_SCR_AHB_EE_ACK))
 727   1          {
 728   2              /* Wait for acknowledgment from PHUB */
 729   2          }
 730   1      }
 731          
 732          
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 13  

 733          /*******************************************************************************
 734          * Function Name: CyEEPROM_ReadRelease
 735          ********************************************************************************
 736          *
 737          * Summary:
 738          *  Release the read reservation of the EEPROM.
 739          *
 740          * Parameters:
 741          *  None
 742          *
 743          * Return:
 744          *  None
 745          *
 746          *******************************************************************************/
 747          void CyEEPROM_ReadRelease(void) 
 748          {
 749   1          CY_FLASH_EE_SCR_REG &= (uint8)(~CY_FLASH_EE_SCR_AHB_EE_REQ);
 750   1      }
 751          
 752          
 753          /* [] END OF FILE */
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 14  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION CyFlash_Start (BEGIN)
                                           ; SOURCE LINE # 58
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 62
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 69
0008 9043A0            MOV     DPTR,#043A0H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 4408              ORL     A,#08H
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 70
0013 9043B0            MOV     DPTR,#043B0H
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 4408              ORL     A,#08H
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 83
001E 904701            MOV     DPTR,#04701H
0021 74C8              MOV     A,#0C8H
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 93
0024 9043AC            MOV     DPTR,#043ACH
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 EF                MOV     A,R7
002A 4401              ORL     A,#01H
002C FF                MOV     R7,A
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 94
002F 9043BC            MOV     DPTR,#043BCH
0032 E0                MOVX    A,@DPTR
0033 FF                MOV     R7,A
0034 EF                MOV     A,R7
0035 4401              ORL     A,#01H
0037 FF                MOV     R7,A
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
003A         ?C0001:
                                           ; SOURCE LINE # 96
003A 904700            MOV     DPTR,#04700H
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F EF                MOV     A,R7
0040 5420              ANL     A,#020H
0042 FF                MOV     R7,A
0043 7E00              MOV     R6,#00H
0045 EF                MOV     A,R7
0046 4E                ORL     A,R6
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 15  

0047 60F1              JZ      ?C0001
                                           ; SOURCE LINE # 97
                                           ; SOURCE LINE # 99
0049         ?C0002:
                                           ; SOURCE LINE # 101
0049 900000      R     MOV     DPTR,#interruptState
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 102
0051 22                RET     
             ; FUNCTION CyFlash_Start (END)

             ; FUNCTION CyFlash_Stop (BEGIN)
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 127
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 129
0008 9043AC            MOV     DPTR,#043ACH
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 54FE              ANL     A,#0FEH
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 130
0013 9043BC            MOV     DPTR,#043BCH
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 54FE              ANL     A,#0FEH
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 132
001E 900000      R     MOV     DPTR,#interruptState
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 133
0026 22                RET     
             ; FUNCTION CyFlash_Stop (END)

             ; FUNCTION CySetTempInt (BEGIN)
                                           ; SOURCE LINE # 155
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 160
0000 120000      E     LCALL   CySpcStart
                                           ; SOURCE LINE # 163
0003 900000      R     MOV     DPTR,#status
0006 74FF              MOV     A,#0FFH
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 165
0009 120000      E     LCALL   CySpcLock
000C EF                MOV     A,R7
000D 704A              JNZ     ?C0005
                                           ; SOURCE LINE # 166
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 16  

                                           ; SOURCE LINE # 168
000F 7F01              MOV     R7,#01H
0011 120000      E     LCALL   _CySpcGetTemp
0014 EF                MOV     A,R7
0015 6407              XRL     A,#07H
0017 703B              JNZ     ?C0006
                                           ; SOURCE LINE # 169
0019         ?C0009:
                                           ; SOURCE LINE # 171
                                           ; SOURCE LINE # 172
0019 7B01              MOV     R3,#01H
001B 7A00        R     MOV     R2,#HIGH dieTemperature
001D 7900        R     MOV     R1,#LOW dieTemperature
001F 7D02              MOV     R5,#02H
0021 120000      E     LCALL   _CySpcReadData
0024 EF                MOV     A,R7
0025 B4021D            CJNE    A,#02H,?C0007
                                           ; SOURCE LINE # 173
                                           ; SOURCE LINE # 174
0028 900000      R     MOV     DPTR,#status
002B E4                CLR     A
002C F0                MOVX    @DPTR,A
002D         ?C0011:
                                           ; SOURCE LINE # 176
002D 904722            MOV     DPTR,#04722H
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 EF                MOV     A,R7
0033 5402              ANL     A,#02H
0035 FF                MOV     R7,A
0036 7E00              MOV     R6,#00H
0038 EF                MOV     A,R7
0039 4E                ORL     A,R6
003A 7018              JNZ     ?C0006
                                           ; SOURCE LINE # 177
                                           ; SOURCE LINE # 179
003C 7F01              MOV     R7,#01H
003E 7E00              MOV     R6,#00H
0040 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 180
0043 80E8              SJMP    ?C0011
                                           ; SOURCE LINE # 181
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 184
0045         ?C0007:
0045 904722            MOV     DPTR,#04722H
0048 E0                MOVX    A,@DPTR
0049 FF                MOV     R7,A
004A EF                MOV     A,R7
004B 5402              ANL     A,#02H
004D FF                MOV     R7,A
004E 7E00              MOV     R6,#00H
0050 EF                MOV     A,R7
0051 4E                ORL     A,R6
0052 60C5              JZ      ?C0009
                                           ; SOURCE LINE # 185
0054         ?C0006:
                                           ; SOURCE LINE # 187
0054 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 188
0057 8006              SJMP    ?C0013
0059         ?C0005:
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 17  

                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
0059 900000      R     MOV     DPTR,#status
005C 7404              MOV     A,#04H
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 192
005F         ?C0013:
                                           ; SOURCE LINE # 194
005F 900000      R     MOV     DPTR,#status
0062 E0                MOVX    A,@DPTR
0063 FF                MOV     R7,A
                                           ; SOURCE LINE # 195
0064         ?C0014:
0064 22                RET     
             ; FUNCTION CySetTempInt (END)

             ; FUNCTION CyFlashGetSpcAlgorithm (BEGIN)
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
                                           ; SOURCE LINE # 220
0000 120000      E     LCALL   CySpcStart
                                           ; SOURCE LINE # 222
0003 120000      E     LCALL   CySpcLock
0006 EF                MOV     A,R7
0007 7055              JNZ     ?C0015
                                           ; SOURCE LINE # 223
                                           ; SOURCE LINE # 224
0009 120000      E     LCALL   CySpcGetAlgorithm
000C 900000      R     MOV     DPTR,#status
000F EF                MOV     A,R7
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 226
0011 900000      R     MOV     DPTR,#status
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 EF                MOV     A,R7
0017 6407              XRL     A,#07H
0019 703E              JNZ     ?C0016
                                           ; SOURCE LINE # 227
001B         ?C0017:
                                           ; SOURCE LINE # 228
001B 904722            MOV     DPTR,#04722H
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 5402              ANL     A,#02H
0023 FF                MOV     R7,A
0024 7E00              MOV     R6,#00H
0026 EF                MOV     A,R7
0027 4E                ORL     A,R6
0028 7009              JNZ     ?C0018
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 231
002A 7F01              MOV     R7,#01H
002C 7E00              MOV     R6,#00H
002E 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 232
0031 80E8              SJMP    ?C0017
0033         ?C0018:
                                           ; SOURCE LINE # 234
0033 904722            MOV     DPTR,#04722H
0036 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 18  

0037 FF                MOV     R7,A
0038 EF                MOV     A,R7
0039 5402              ANL     A,#02H
003B FF                MOV     R7,A
003C 7E00              MOV     R6,#00H
003E EF                MOV     A,R7
003F 4E                ORL     A,R6
0040 600D              JZ      ?C0020
0042 904722            MOV     DPTR,#04722H
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 EF                MOV     A,R7
0048 13                RRC     A
0049 13                RRC     A
004A 543F              ANL     A,#03FH
004C FF                MOV     R7,A
004D 8002              SJMP    ?C0021
004F         ?C0020:
004F 7FFF              MOV     R7,#0FFH
0051         ?C0021:
0051 EF                MOV     A,R7
0052 7005              JNZ     ?C0016
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 236
0054 900000      R     MOV     DPTR,#status
0057 E4                CLR     A
0058 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 238
0059         ?C0016:
                                           ; SOURCE LINE # 239
0059 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 240
005C 8006              SJMP    ?C0022
005E         ?C0015:
                                           ; SOURCE LINE # 242
                                           ; SOURCE LINE # 243
005E 900000      R     MOV     DPTR,#status
0061 7404              MOV     A,#04H
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 244
0064         ?C0022:
                                           ; SOURCE LINE # 246
0064 900000      R     MOV     DPTR,#status
0067 E0                MOVX    A,@DPTR
0068 FF                MOV     R7,A
                                           ; SOURCE LINE # 247
0069         ?C0023:
0069 22                RET     
             ; FUNCTION CyFlashGetSpcAlgorithm (END)

             ; FUNCTION CySetTemp (BEGIN)
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 274
                                           ; SOURCE LINE # 275
0000 120000      R     LCALL   CyFlashGetSpcAlgorithm
0003 900000      R     MOV     DPTR,#status
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 277
0008 900000      R     MOV     DPTR,#status
000B E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 19  

000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 7008              JNZ     ?C0024
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 279
0010 120000      R     LCALL   CySetTempInt
0013 900000      R     MOV     DPTR,#status
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 280
0018         ?C0024:
                                           ; SOURCE LINE # 282
0018 900000      R     MOV     DPTR,#status
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
                                           ; SOURCE LINE # 283
001D         ?C0025:
001D 22                RET     
             ; FUNCTION CySetTemp (END)

             ; FUNCTION _CySetFlashEEBuffer (BEGIN)
                                           ; SOURCE LINE # 306
0000 900000      R     MOV     DPTR,#buffer
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 308
0006 900000      R     MOV     DPTR,#status
0009 E4                CLR     A
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 310
000B 120000      E     LCALL   CySpcStart
                                           ; SOURCE LINE # 314
000E 7B00              MOV     R3,#00H
0010 7A00              MOV     R2,#00H
0012 7900              MOV     R1,#00H
0014 C003              PUSH    AR3
0016 C002              PUSH    AR2
0018 C001              PUSH    AR1
001A 900000      R     MOV     DPTR,#buffer
001D 120000      E     LCALL   ?C?PLDXDATA
0020 D082              POP     DPL
0022 D083              POP     DPH
0024 D0E0              POP     ACC
0026 6B                XRL     A,R3
0027 7008              JNZ     ?C0078
0029 E9                MOV     A,R1
002A 6582              XRL     A,DPL
002C 7003              JNZ     ?C0078
002E EA                MOV     A,R2
002F 6583              XRL     A,DPH
0031         ?C0078:
0031 7014              JNZ     ?C0026
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 316
0033 900000      R     MOV     DPTR,#rowBuffer
0036 120000      E     LCALL   ?C?PLDXDATA
0039 900000      R     MOV     DPTR,#rowBuffer
003C 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 317
003F 900000      R     MOV     DPTR,#status
0042 7401              MOV     A,#01H
0044 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 20  

                                           ; SOURCE LINE # 318
0045 8029              SJMP    ?C0027
0047         ?C0026:
                                           ; SOURCE LINE # 319
0047 120000      E     LCALL   CySpcLock
004A EF                MOV     A,R7
004B 6014              JZ      ?C0028
                                           ; SOURCE LINE # 320
                                           ; SOURCE LINE # 321
004D 900000      R     MOV     DPTR,#rowBuffer
0050 120000      E     LCALL   ?C?PLDXDATA
0053 900000      R     MOV     DPTR,#rowBuffer
0056 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 322
0059 900000      R     MOV     DPTR,#status
005C 7404              MOV     A,#04H
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 323
005F 800F              SJMP    ?C0027
0061         ?C0028:
                                           ; SOURCE LINE # 325
                                           ; SOURCE LINE # 326
0061 900000      R     MOV     DPTR,#buffer
0064 120000      E     LCALL   ?C?PLDXDATA
0067 900000      R     MOV     DPTR,#rowBuffer
006A 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 327
006D 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 328
0070         ?C0027:
                                           ; SOURCE LINE # 337
0070 900000      R     MOV     DPTR,#status
0073 E0                MOVX    A,@DPTR
0074 FF                MOV     R7,A
                                           ; SOURCE LINE # 338
0075         ?C0030:
0075 22                RET     
             ; FUNCTION _CySetFlashEEBuffer (END)

             ; FUNCTION _CyWriteRowData (BEGIN)
                                           ; SOURCE LINE # 366
0000 900000      R     MOV     DPTR,#arrayId
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#rowAddress
0008 EC                MOV     A,R4
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
000D 900000      R     MOV     DPTR,#rowData
0010 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 367
                                           ; SOURCE LINE # 371
0013 900000      R     MOV     DPTR,#arrayId
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 D3                SETB    C
001A 943F              SUBB    A,#03FH
001C 4006              JC      ?C0031
001E 7E00              MOV     R6,#00H
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 21  

0020 7F10              MOV     R7,#010H
0022 8004              SJMP    ?C0032
0024         ?C0031:
0024 7E01              MOV     R6,#01H
0026 7F00              MOV     R7,#00H
0028         ?C0032:
0028 900000      R     MOV     DPTR,#rowSize
002B EE                MOV     A,R6
002C F0                MOVX    @DPTR,A
002D A3                INC     DPTR
002E EF                MOV     A,R7
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 372
0030 900000      R     MOV     DPTR,#arrayId
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 C007              PUSH    AR7
0037 900000      R     MOV     DPTR,#rowAddress
003A E0                MOVX    A,@DPTR
003B FC                MOV     R4,A
003C A3                INC     DPTR
003D E0                MOVX    A,@DPTR
003E FD                MOV     R5,A
003F 900000      R     MOV     DPTR,#rowData
0042 120000      E     LCALL   ?C?PLDXDATA
0045 900000      R     MOV     DPTR,#rowSize
0048 E0                MOVX    A,@DPTR
0049 FE                MOV     R6,A
004A A3                INC     DPTR
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
004D 900000      R     MOV     DPTR,#?_CyWriteRowFull?BYTE+06H
0050 EE                MOV     A,R6
0051 F0                MOVX    @DPTR,A
0052 A3                INC     DPTR
0053 EF                MOV     A,R7
0054 F0                MOVX    @DPTR,A
0055 D007              POP     AR7
0057 120000      R     LCALL   _CyWriteRowFull
005A 900000      R     MOV     DPTR,#status
005D EF                MOV     A,R7
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 374
005F 900000      R     MOV     DPTR,#status
0062 E0                MOVX    A,@DPTR
0063 FF                MOV     R7,A
                                           ; SOURCE LINE # 375
0064         ?C0033:
0064 22                RET     
             ; FUNCTION _CyWriteRowData (END)

             ; FUNCTION _CyWriteRowFull (BEGIN)
                                           ; SOURCE LINE # 443
0000 900000      R     MOV     DPTR,#arrayId
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#rowNumber
0008 EC                MOV     A,R4
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 22  

000D 900000      R     MOV     DPTR,#rowData
0010 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 445
                                           ; SOURCE LINE # 446
0013 900000      R     MOV     DPTR,#status
0016 E4                CLR     A
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 448
0018 900000      R     MOV     DPTR,#arrayId
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E D3                SETB    C
001F 943F              SUBB    A,#03FH
0021 5011              JNC     ?C0034
0023 900000      R     MOV     DPTR,#arrayId
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 D3                SETB    C
002A 9401              SUBB    A,#01H
002C 4006              JC      ?C0034
                                           ; SOURCE LINE # 449
                                           ; SOURCE LINE # 450
002E 900000      R     MOV     DPTR,#status
0031 7401              MOV     A,#01H
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 451
0034         ?C0034:
                                           ; SOURCE LINE # 453
0034 900000      R     MOV     DPTR,#arrayId
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 EF                MOV     A,R7
003A D3                SETB    C
003B 947F              SUBB    A,#07FH
003D 4006              JC      ?C0035
                                           ; SOURCE LINE # 454
                                           ; SOURCE LINE # 455
003F 900000      R     MOV     DPTR,#status
0042 7401              MOV     A,#01H
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 456
0045         ?C0035:
                                           ; SOURCE LINE # 458
0045 900000      R     MOV     DPTR,#arrayId
0048 E0                MOVX    A,@DPTR
0049 FF                MOV     R7,A
004A EF                MOV     A,R7
004B C3                CLR     C
004C 9440              SUBB    A,#040H
004E 4011              JC      ?C0036
0050 900000      R     MOV     DPTR,#arrayId
0053 E0                MOVX    A,@DPTR
0054 FF                MOV     R7,A
0055 EF                MOV     A,R7
0056 D3                SETB    C
0057 9441              SUBB    A,#041H
0059 4006              JC      ?C0036
                                           ; SOURCE LINE # 459
                                           ; SOURCE LINE # 460
005B 900000      R     MOV     DPTR,#status
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 23  

005E 7401              MOV     A,#01H
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 461
0061         ?C0036:
                                           ; SOURCE LINE # 463
0061 900000      R     MOV     DPTR,#arrayId
0064 E0                MOVX    A,@DPTR
0065 FF                MOV     R7,A
0066 EF                MOV     A,R7
0067 D3                SETB    C
0068 943F              SUBB    A,#03FH
006A 5019              JNC     ?C0037
                                           ; SOURCE LINE # 464
                                           ; SOURCE LINE # 466
006C 900000      R     MOV     DPTR,#rowNumber
006F E0                MOVX    A,@DPTR
0070 FE                MOV     R6,A
0071 A3                INC     DPTR
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 D3                SETB    C
0075 EF                MOV     A,R7
0076 9480              SUBB    A,#080H
0078 EE                MOV     A,R6
0079 9400              SUBB    A,#00H
007B 4033              JC      ?C0039
                                           ; SOURCE LINE # 467
                                           ; SOURCE LINE # 468
007D 900000      R     MOV     DPTR,#status
0080 7401              MOV     A,#01H
0082 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 469
                                           ; SOURCE LINE # 470
0083 802B              SJMP    ?C0039
0085         ?C0037:
                                           ; SOURCE LINE # 472
                                           ; SOURCE LINE # 474
0085 900000      R     MOV     DPTR,#rowNumber
0088 E0                MOVX    A,@DPTR
0089 FE                MOV     R6,A
008A A3                INC     DPTR
008B E0                MOVX    A,@DPTR
008C FF                MOV     R7,A
008D D3                SETB    C
008E EF                MOV     A,R7
008F 9440              SUBB    A,#040H
0091 EE                MOV     A,R6
0092 9400              SUBB    A,#00H
0094 4006              JC      ?C0040
                                           ; SOURCE LINE # 475
                                           ; SOURCE LINE # 476
0096 900000      R     MOV     DPTR,#status
0099 7401              MOV     A,#01H
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 477
009C         ?C0040:
                                           ; SOURCE LINE # 479
009C 900000      R     MOV     DPTR,#rowSize
009F E0                MOVX    A,@DPTR
00A0 FE                MOV     R6,A
00A1 A3                INC     DPTR
00A2 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 24  

00A3 FF                MOV     R7,A
00A4 EF                MOV     A,R7
00A5 6410              XRL     A,#010H
00A7 4E                ORL     A,R6
00A8 6006              JZ      ?C0039
                                           ; SOURCE LINE # 480
                                           ; SOURCE LINE # 481
00AA 900000      R     MOV     DPTR,#status
00AD 7401              MOV     A,#01H
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 482
                                           ; SOURCE LINE # 483
00B0         ?C0039:
                                           ; SOURCE LINE # 485
00B0 7B00              MOV     R3,#00H
00B2 7A00              MOV     R2,#00H
00B4 7900              MOV     R1,#00H
00B6 C003              PUSH    AR3
00B8 C002              PUSH    AR2
00BA C001              PUSH    AR1
00BC 900000      R     MOV     DPTR,#rowData
00BF 120000      E     LCALL   ?C?PLDXDATA
00C2 D082              POP     DPL
00C4 D083              POP     DPH
00C6 D0E0              POP     ACC
00C8 6B                XRL     A,R3
00C9 7008              JNZ     ?C0079
00CB E9                MOV     A,R1
00CC 6582              XRL     A,DPL
00CE 7003              JNZ     ?C0079
00D0 EA                MOV     A,R2
00D1 6583              XRL     A,DPH
00D3         ?C0079:
00D3 7006              JNZ     ?C0042
                                           ; SOURCE LINE # 486
                                           ; SOURCE LINE # 487
00D5 900000      R     MOV     DPTR,#status
00D8 7401              MOV     A,#01H
00DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 488
00DB         ?C0042:
                                           ; SOURCE LINE # 491
00DB 900000      R     MOV     DPTR,#status
00DE E0                MOVX    A,@DPTR
00DF FF                MOV     R7,A
00E0 EF                MOV     A,R7
00E1 6003              JZ      $ + 5H
00E3 020000      R     LJMP    ?C0043
                                           ; SOURCE LINE # 492
                                           ; SOURCE LINE # 493
00E6 120000      E     LCALL   CySpcLock
00E9 EF                MOV     A,R7
00EA 6003              JZ      $ + 5H
00EC 020000      R     LJMP    ?C0044
                                           ; SOURCE LINE # 494
                                           ; SOURCE LINE # 496
00EF 900000      R     MOV     DPTR,#arrayId
00F2 E0                MOVX    A,@DPTR
00F3 FF                MOV     R7,A
00F4 C007              PUSH    AR7
00F6 900000      R     MOV     DPTR,#rowNumber
00F9 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 25  

00FA FC                MOV     R4,A
00FB A3                INC     DPTR
00FC E0                MOVX    A,@DPTR
00FD FD                MOV     R5,A
00FE 900000      R     MOV     DPTR,#rowData
0101 120000      E     LCALL   ?C?PLDXDATA
0104 900000      R     MOV     DPTR,#rowSize
0107 E0                MOVX    A,@DPTR
0108 FE                MOV     R6,A
0109 A3                INC     DPTR
010A E0                MOVX    A,@DPTR
010B FF                MOV     R7,A
010C 900000      E     MOV     DPTR,#?_CySpcLoadRowFull?BYTE+06H
010F EE                MOV     A,R6
0110 F0                MOVX    @DPTR,A
0111 A3                INC     DPTR
0112 EF                MOV     A,R7
0113 F0                MOVX    @DPTR,A
0114 D007              POP     AR7
0116 120000      E     LCALL   _CySpcLoadRowFull
0119 900000      R     MOV     DPTR,#status
011C EF                MOV     A,R7
011D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 498
011E 900000      R     MOV     DPTR,#status
0121 E0                MOVX    A,@DPTR
0122 FF                MOV     R7,A
0123 EF                MOV     A,R7
0124 6407              XRL     A,#07H
0126 6003              JZ      $ + 5H
0128 020000      R     LJMP    ?C0045
                                           ; SOURCE LINE # 499
012B         ?C0046:
                                           ; SOURCE LINE # 500
012B 904722            MOV     DPTR,#04722H
012E E0                MOVX    A,@DPTR
012F FF                MOV     R7,A
0130 EF                MOV     A,R7
0131 5402              ANL     A,#02H
0133 FF                MOV     R7,A
0134 7E00              MOV     R6,#00H
0136 EF                MOV     A,R7
0137 4E                ORL     A,R6
0138 7009              JNZ     ?C0047
                                           ; SOURCE LINE # 501
                                           ; SOURCE LINE # 503
013A 7F01              MOV     R7,#01H
013C 7E00              MOV     R6,#00H
013E 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 504
0141 80E8              SJMP    ?C0046
0143         ?C0047:
                                           ; SOURCE LINE # 507
0143 904722            MOV     DPTR,#04722H
0146 E0                MOVX    A,@DPTR
0147 FF                MOV     R7,A
0148 EF                MOV     A,R7
0149 5402              ANL     A,#02H
014B FF                MOV     R7,A
014C 7E00              MOV     R6,#00H
014E EF                MOV     A,R7
014F 4E                ORL     A,R6
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 26  

0150 600D              JZ      ?C0049
0152 904722            MOV     DPTR,#04722H
0155 E0                MOVX    A,@DPTR
0156 FF                MOV     R7,A
0157 EF                MOV     A,R7
0158 13                RRC     A
0159 13                RRC     A
015A 543F              ANL     A,#03FH
015C FF                MOV     R7,A
015D 8002              SJMP    ?C0050
015F         ?C0049:
015F 7FFF              MOV     R7,#0FFH
0161         ?C0050:
0161 EF                MOV     A,R7
0162 7007              JNZ     ?C0048
                                           ; SOURCE LINE # 508
                                           ; SOURCE LINE # 509
0164 900000      R     MOV     DPTR,#status
0167 E4                CLR     A
0168 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 510
0169 8006              SJMP    ?C0051
016B         ?C0048:
                                           ; SOURCE LINE # 512
                                           ; SOURCE LINE # 513
016B 900000      R     MOV     DPTR,#status
016E 74FF              MOV     A,#0FFH
0170 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 514
0171         ?C0051:
                                           ; SOURCE LINE # 516
0171 900000      R     MOV     DPTR,#status
0174 E0                MOVX    A,@DPTR
0175 FF                MOV     R7,A
0176 EF                MOV     A,R7
0177 7074              JNZ     ?C0045
                                           ; SOURCE LINE # 517
                                           ; SOURCE LINE # 519
0179 900000      R     MOV     DPTR,#arrayId
017C E0                MOVX    A,@DPTR
017D FF                MOV     R7,A
017E 900000      R     MOV     DPTR,#rowNumber
0181 E0                MOVX    A,@DPTR
0182 FC                MOV     R4,A
0183 A3                INC     DPTR
0184 E0                MOVX    A,@DPTR
0185 FD                MOV     R5,A
0186 900000      R     MOV     DPTR,#dieTemperature
0189 E0                MOVX    A,@DPTR
018A FB                MOV     R3,A
018B 900000      R     MOV     DPTR,#dieTemperature+01H
018E E0                MOVX    A,@DPTR
018F FE                MOV     R6,A
0190 900000      E     MOV     DPTR,#?_CySpcWriteRow?BYTE+04H
0193 EE                MOV     A,R6
0194 F0                MOVX    @DPTR,A
0195 120000      E     LCALL   _CySpcWriteRow
0198 900000      R     MOV     DPTR,#status
019B EF                MOV     A,R7
019C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 521
019D 900000      R     MOV     DPTR,#status
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 27  

01A0 E0                MOVX    A,@DPTR
01A1 FF                MOV     R7,A
01A2 EF                MOV     A,R7
01A3 6407              XRL     A,#07H
01A5 7046              JNZ     ?C0045
                                           ; SOURCE LINE # 522
01A7         ?C0054:
                                           ; SOURCE LINE # 523
01A7 904722            MOV     DPTR,#04722H
01AA E0                MOVX    A,@DPTR
01AB FF                MOV     R7,A
01AC EF                MOV     A,R7
01AD 5402              ANL     A,#02H
01AF FF                MOV     R7,A
01B0 7E00              MOV     R6,#00H
01B2 EF                MOV     A,R7
01B3 4E                ORL     A,R6
01B4 7009              JNZ     ?C0055
                                           ; SOURCE LINE # 524
                                           ; SOURCE LINE # 526
01B6 7F01              MOV     R7,#01H
01B8 7E00              MOV     R6,#00H
01BA 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 527
01BD 80E8              SJMP    ?C0054
01BF         ?C0055:
                                           ; SOURCE LINE # 530
01BF 904722            MOV     DPTR,#04722H
01C2 E0                MOVX    A,@DPTR
01C3 FF                MOV     R7,A
01C4 EF                MOV     A,R7
01C5 5402              ANL     A,#02H
01C7 FF                MOV     R7,A
01C8 7E00              MOV     R6,#00H
01CA EF                MOV     A,R7
01CB 4E                ORL     A,R6
01CC 600D              JZ      ?C0057
01CE 904722            MOV     DPTR,#04722H
01D1 E0                MOVX    A,@DPTR
01D2 FF                MOV     R7,A
01D3 EF                MOV     A,R7
01D4 13                RRC     A
01D5 13                RRC     A
01D6 543F              ANL     A,#03FH
01D8 FF                MOV     R7,A
01D9 8002              SJMP    ?C0058
01DB         ?C0057:
01DB 7FFF              MOV     R7,#0FFH
01DD         ?C0058:
01DD EF                MOV     A,R7
01DE 7007              JNZ     ?C0056
                                           ; SOURCE LINE # 531
                                           ; SOURCE LINE # 532
01E0 900000      R     MOV     DPTR,#status
01E3 E4                CLR     A
01E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 533
01E5 8006              SJMP    ?C0045
01E7         ?C0056:
                                           ; SOURCE LINE # 535
                                           ; SOURCE LINE # 536
01E7 900000      R     MOV     DPTR,#status
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 28  

01EA 74FF              MOV     A,#0FFH
01EC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 537
                                           ; SOURCE LINE # 538
                                           ; SOURCE LINE # 539
                                           ; SOURCE LINE # 540
01ED         ?C0045:
                                           ; SOURCE LINE # 541
01ED 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 542
01F0 8006              SJMP    ?C0043
01F2         ?C0044:
                                           ; SOURCE LINE # 544
                                           ; SOURCE LINE # 545
01F2 900000      R     MOV     DPTR,#status
01F5 7404              MOV     A,#04H
01F7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 546
                                           ; SOURCE LINE # 547
01F8         ?C0043:
                                           ; SOURCE LINE # 549
01F8 900000      R     MOV     DPTR,#status
01FB E0                MOVX    A,@DPTR
01FC FF                MOV     R7,A
                                           ; SOURCE LINE # 550
01FD         ?C0061:
01FD 22                RET     
             ; FUNCTION _CyWriteRowFull (END)

             ; FUNCTION _CyFlash_SetWaitCycles (BEGIN)
                                           ; SOURCE LINE # 571
0000 900000      R     MOV     DPTR,#freq
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 572
                                           ; SOURCE LINE # 576
0005 120000      E     LCALL   CyEnterCriticalSection
0008 900000      R     MOV     DPTR,#interruptState
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 584
000D 900000      R     MOV     DPTR,#freq
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 EF                MOV     A,R7
0013 C3                CLR     C
0014 9416              SUBB    A,#016H
0016 5014              JNC     ?C0062
                                           ; SOURCE LINE # 585
                                           ; SOURCE LINE # 586
0018 904800            MOV     DPTR,#04800H
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 543F              ANL     A,#03FH
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 4440              ORL     A,#040H
0024 FF                MOV     R7,A
0025 904800            MOV     DPTR,#04800H
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 29  

                                           ; SOURCE LINE # 588
002A 8043              SJMP    ?C0063
002C         ?C0062:
                                           ; SOURCE LINE # 589
002C 900000      R     MOV     DPTR,#freq
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 C3                CLR     C
0033 942C              SUBB    A,#02CH
0035 5014              JNC     ?C0064
                                           ; SOURCE LINE # 590
                                           ; SOURCE LINE # 591
0037 904800            MOV     DPTR,#04800H
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C EF                MOV     A,R7
003D 543F              ANL     A,#03FH
003F FF                MOV     R7,A
0040 EF                MOV     A,R7
0041 4480              ORL     A,#080H
0043 FF                MOV     R7,A
0044 904800            MOV     DPTR,#04800H
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 593
0049 8024              SJMP    ?C0063
004B         ?C0064:
                                           ; SOURCE LINE # 594
004B 900000      R     MOV     DPTR,#freq
004E E0                MOVX    A,@DPTR
004F FF                MOV     R7,A
0050 EF                MOV     A,R7
0051 C3                CLR     C
0052 9443              SUBB    A,#043H
0054 5014              JNC     ?C0066
                                           ; SOURCE LINE # 595
                                           ; SOURCE LINE # 596
0056 904800            MOV     DPTR,#04800H
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
005B EF                MOV     A,R7
005C 543F              ANL     A,#03FH
005E FF                MOV     R7,A
005F EF                MOV     A,R7
0060 44C0              ORL     A,#0C0H
0062 FF                MOV     R7,A
0063 904800            MOV     DPTR,#04800H
0066 EF                MOV     A,R7
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 598
0068 8005              SJMP    ?C0063
006A         ?C0066:
                                           ; SOURCE LINE # 612
                                           ; SOURCE LINE # 614
006A 7F00              MOV     R7,#00H
006C 120000      E     LCALL   _?CyHalt
                                           ; SOURCE LINE # 615
006F         ?C0063:
                                           ; SOURCE LINE # 618
006F 900000      R     MOV     DPTR,#interruptState
0072 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 30  

0073 FF                MOV     R7,A
0074 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 619
0077 22                RET     
             ; FUNCTION _CyFlash_SetWaitCycles (END)

             ; FUNCTION CyEEPROM_Start (BEGIN)
                                           ; SOURCE LINE # 636
                                           ; SOURCE LINE # 637
                                           ; SOURCE LINE # 640
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 647
0008 9043A0            MOV     DPTR,#043A0H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 4408              ORL     A,#08H
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 648
0013 9043B0            MOV     DPTR,#043B0H
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 4408              ORL     A,#08H
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 661
001E 904701            MOV     DPTR,#04701H
0021 74C8              MOV     A,#0C8H
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 668
0024 9043AC            MOV     DPTR,#043ACH
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 EF                MOV     A,R7
002A 4410              ORL     A,#010H
002C FF                MOV     R7,A
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 669
002F 9043BC            MOV     DPTR,#043BCH
0032 E0                MOVX    A,@DPTR
0033 FF                MOV     R7,A
0034 EF                MOV     A,R7
0035 4410              ORL     A,#010H
0037 FF                MOV     R7,A
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
003A         ?C0070:
                                           ; SOURCE LINE # 671
003A 904700            MOV     DPTR,#04700H
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F EF                MOV     A,R7
0040 5420              ANL     A,#020H
0042 FF                MOV     R7,A
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 31  

0043 7E00              MOV     R6,#00H
0045 EF                MOV     A,R7
0046 4E                ORL     A,R6
0047 60F1              JZ      ?C0070
                                           ; SOURCE LINE # 672
                                           ; SOURCE LINE # 674
0049         ?C0071:
                                           ; SOURCE LINE # 676
0049 900000      R     MOV     DPTR,#interruptState
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 677
0051 22                RET     
             ; FUNCTION CyEEPROM_Start (END)

             ; FUNCTION CyEEPROM_Stop (BEGIN)
                                           ; SOURCE LINE # 694
                                           ; SOURCE LINE # 695
                                           ; SOURCE LINE # 698
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 700
0008 9043AC            MOV     DPTR,#043ACH
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 54EF              ANL     A,#0EFH
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 701
0013 9043BC            MOV     DPTR,#043BCH
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 54EF              ANL     A,#0EFH
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 703
001E 900000      R     MOV     DPTR,#interruptState
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 704
0026 22                RET     
             ; FUNCTION CyEEPROM_Stop (END)

             ; FUNCTION CyEEPROM_ReadReserve (BEGIN)
                                           ; SOURCE LINE # 721
                                           ; SOURCE LINE # 722
                                           ; SOURCE LINE # 724
0000 904702            MOV     DPTR,#04702H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4401              ORL     A,#01H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
C51 COMPILER V9.51   CYFLASH                                                               12/05/2015 15:02:21 PAGE 32  

000A F0                MOVX    @DPTR,A
000B         ?C0074:
                                           ; SOURCE LINE # 726
000B 904702            MOV     DPTR,#04702H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 5402              ANL     A,#02H
0013 FF                MOV     R7,A
0014 7E00              MOV     R6,#00H
0016 EF                MOV     A,R7
0017 4E                ORL     A,R6
0018 60F1              JZ      ?C0074
                                           ; SOURCE LINE # 727
                                           ; SOURCE LINE # 729
001A         ?C0075:
                                           ; SOURCE LINE # 730
001A         ?C0076:
001A 22                RET     
             ; FUNCTION CyEEPROM_ReadReserve (END)

             ; FUNCTION CyEEPROM_ReadRelease (BEGIN)
                                           ; SOURCE LINE # 747
                                           ; SOURCE LINE # 748
                                           ; SOURCE LINE # 749
0000 904702            MOV     DPTR,#04702H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 750
000B 22                RET     
             ; FUNCTION CyEEPROM_ReadRelease (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1367    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5      31
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
