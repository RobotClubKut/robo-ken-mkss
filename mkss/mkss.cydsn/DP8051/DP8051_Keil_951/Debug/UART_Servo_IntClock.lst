C51 COMPILER V9.51   UART_SERVO_INTCLOCK                                                   12/05/2015 15:02:21 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE UART_SERVO_INTCLOCK
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\UART_Servo_IntClock.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\UART_Servo_IntClock.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) 
                    -DB DF(DEBUG) WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/UART_Servo_IntClock.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\
                    -Debug\UART_Servo_IntClock.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: UART_Servo_IntClock.c
   3          * Version 2.20
   4          *
   5          *  Description:
   6          *   This file provides the source code to the API for the clock component.
   7          *
   8          *  Note:
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions, 
  13          * disclaimers, and limitations in the end user license agreement accompanying 
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include <cydevice_trm.h>
  18          #include "UART_Servo_IntClock.h"
  19          
  20          /* Clock Distribution registers. */
  21          #define CLK_DIST_LD              (* (reg8 *) CYREG_CLKDIST_LD)
  22          #define CLK_DIST_BCFG2           (* (reg8 *) CYREG_CLKDIST_BCFG2)
  23          #define BCFG2_MASK               (0x80u)
  24          #define CLK_DIST_DMASK           (* (reg8 *) CYREG_CLKDIST_DMASK)
  25          #define CLK_DIST_AMASK           (* (reg8 *) CYREG_CLKDIST_AMASK)
  26          
  27          #define HAS_CLKDIST_LD_DISABLE   (CY_PSOC3 || CY_PSOC5LP)
  28          
  29          
  30          /*******************************************************************************
  31          * Function Name: UART_Servo_IntClock_Start
  32          ********************************************************************************
  33          *
  34          * Summary:
  35          *  Starts the clock. Note that on startup, clocks may be already running if the
  36          *  "Start on Reset" option is enabled in the DWR.
  37          *
  38          * Parameters:
  39          *  None
  40          *
  41          * Returns:
  42          *  None
  43          *
  44          *******************************************************************************/
  45          void UART_Servo_IntClock_Start(void) 
  46          {
  47   1          /* Set the bit to enable the clock. */
  48   1          UART_Servo_IntClock_CLKEN |= UART_Servo_IntClock_CLKEN_MASK;
  49   1              UART_Servo_IntClock_CLKSTBY |= UART_Servo_IntClock_CLKSTBY_MASK;
  50   1      }
  51          
  52          
C51 COMPILER V9.51   UART_SERVO_INTCLOCK                                                   12/05/2015 15:02:21 PAGE 2   

  53          /*******************************************************************************
  54          * Function Name: UART_Servo_IntClock_Stop
  55          ********************************************************************************
  56          *
  57          * Summary:
  58          *  Stops the clock and returns immediately. This API does not require the
  59          *  source clock to be running but may return before the hardware is actually
  60          *  disabled. If the settings of the clock are changed after calling this
  61          *  function, the clock may glitch when it is started. To avoid the clock
  62          *  glitch, use the StopBlock function.
  63          *
  64          * Parameters:
  65          *  None
  66          *
  67          * Returns:
  68          *  None
  69          *
  70          *******************************************************************************/
  71          void UART_Servo_IntClock_Stop(void) 
  72          {
  73   1          /* Clear the bit to disable the clock. */
  74   1          UART_Servo_IntClock_CLKEN &= (uint8)(~UART_Servo_IntClock_CLKEN_MASK);
  75   1              UART_Servo_IntClock_CLKSTBY &= (uint8)(~UART_Servo_IntClock_CLKSTBY_MASK);
  76   1      }
  77          
  78          
  79          #if(CY_PSOC3 || CY_PSOC5LP)
  80          
  81          
  82          /*******************************************************************************
  83          * Function Name: UART_Servo_IntClock_StopBlock
  84          ********************************************************************************
  85          *
  86          * Summary:
  87          *  Stops the clock and waits for the hardware to actually be disabled before
  88          *  returning. This ensures that the clock is never truncated (high part of the
  89          *  cycle will terminate before the clock is disabled and the API returns).
  90          *  Note that the source clock must be running or this API will never return as
  91          *  a stopped clock cannot be disabled.
  92          *
  93          * Parameters:
  94          *  None
  95          *
  96          * Returns:
  97          *  None
  98          *
  99          *******************************************************************************/
 100          void UART_Servo_IntClock_StopBlock(void) 
 101          {
 102   1          if ((UART_Servo_IntClock_CLKEN & UART_Servo_IntClock_CLKEN_MASK) != 0u)
 103   1          {
 104   2      #if HAS_CLKDIST_LD_DISABLE
 105   2              uint16 oldDivider;
 106   2      
 107   2              CLK_DIST_LD = 0u;
 108   2      
 109   2              /* Clear all the mask bits except ours. */
 110   2      #if defined(UART_Servo_IntClock__CFG3)
                      CLK_DIST_AMASK = UART_Servo_IntClock_CLKEN_MASK;
                      CLK_DIST_DMASK = 0x00u;
              #else
 114   2              CLK_DIST_DMASK = UART_Servo_IntClock_CLKEN_MASK;
C51 COMPILER V9.51   UART_SERVO_INTCLOCK                                                   12/05/2015 15:02:21 PAGE 3   

 115   2              CLK_DIST_AMASK = 0x00u;
 116   2      #endif /* UART_Servo_IntClock__CFG3 */
 117   2      
 118   2              /* Clear mask of bus clock. */
 119   2              CLK_DIST_BCFG2 &= (uint8)(~BCFG2_MASK);
 120   2      
 121   2              oldDivider = CY_GET_REG16(UART_Servo_IntClock_DIV_PTR);
 122   2              CY_SET_REG16(CYREG_CLKDIST_WRK0, oldDivider);
 123   2              CLK_DIST_LD = CYCLK_LD_DISABLE | CYCLK_LD_SYNC_EN | CYCLK_LD_LOAD;
 124   2      
 125   2              /* Wait for clock to be disabled */
 126   2              while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 127   2      #endif /* HAS_CLKDIST_LD_DISABLE */
 128   2      
 129   2              /* Clear the bit to disable the clock. */
 130   2              UART_Servo_IntClock_CLKEN &= (uint8)(~UART_Servo_IntClock_CLKEN_MASK);
 131   2              UART_Servo_IntClock_CLKSTBY &= (uint8)(~UART_Servo_IntClock_CLKSTBY_MASK);
 132   2      
 133   2      #if HAS_CLKDIST_LD_DISABLE
 134   2              /* Clear the disable bit */
 135   2              CLK_DIST_LD = 0x00u;
 136   2              CY_SET_REG16(UART_Servo_IntClock_DIV_PTR, oldDivider);
 137   2      #endif /* HAS_CLKDIST_LD_DISABLE */
 138   2          }
 139   1      }
 140          #endif /* (CY_PSOC3 || CY_PSOC5LP) */
 141          
 142          
 143          /*******************************************************************************
 144          * Function Name: UART_Servo_IntClock_StandbyPower
 145          ********************************************************************************
 146          *
 147          * Summary:
 148          *  Sets whether the clock is active in standby mode.
 149          *
 150          * Parameters:
 151          *  state:  0 to disable clock during standby, nonzero to enable.
 152          *
 153          * Returns:
 154          *  None
 155          *
 156          *******************************************************************************/
 157          void UART_Servo_IntClock_StandbyPower(uint8 state) 
 158          {
 159   1          if(state == 0u)
 160   1          {
 161   2              UART_Servo_IntClock_CLKSTBY &= (uint8)(~UART_Servo_IntClock_CLKSTBY_MASK);
 162   2          }
 163   1          else
 164   1          {
 165   2              UART_Servo_IntClock_CLKSTBY |= UART_Servo_IntClock_CLKSTBY_MASK;
 166   2          }
 167   1      }
 168          
 169          
 170          /*******************************************************************************
 171          * Function Name: UART_Servo_IntClock_SetDividerRegister
 172          ********************************************************************************
 173          *
 174          * Summary:
 175          *  Modifies the clock divider and, thus, the frequency. When the clock divider
 176          *  register is set to zero or changed from zero, the clock will be temporarily
C51 COMPILER V9.51   UART_SERVO_INTCLOCK                                                   12/05/2015 15:02:21 PAGE 4   

 177          *  disabled in order to change the SSS mode bit. If the clock is enabled when
 178          *  SetDividerRegister is called, then the source clock must be running.
 179          *
 180          * Parameters:
 181          *  clkDivider:  Divider register value (0-65,535). This value is NOT the
 182          *    divider; the clock hardware divides by clkDivider plus one. For example,
 183          *    to divide the clock by 2, this parameter should be set to 1.
 184          *  restart:  If nonzero, restarts the clock divider: the current clock cycle
 185          *   will be truncated and the new divide value will take effect immediately. If
 186          *   zero, the new divide value will take effect at the end of the current clock
 187          *   cycle.
 188          *
 189          * Returns:
 190          *  None
 191          *
 192          *******************************************************************************/
 193          void UART_Servo_IntClock_SetDividerRegister(uint16 clkDivider, uint8 restart)
 194                                          
 195          {
 196   1          uint8 enabled;
 197   1      
 198   1          uint8 currSrc = UART_Servo_IntClock_GetSourceRegister();
 199   1          uint16 oldDivider = UART_Servo_IntClock_GetDividerRegister();
 200   1      
 201   1          if (clkDivider != oldDivider)
 202   1          {
 203   2              enabled = UART_Servo_IntClock_CLKEN & UART_Servo_IntClock_CLKEN_MASK;
 204   2      
 205   2              if ((currSrc == (uint8)CYCLK_SRC_SEL_CLK_SYNC_D) && ((oldDivider == 0u) || (clkDivider == 0u)))
 206   2              {
 207   3                  /* Moving to/from SSS requires correct ordering to prevent halting the clock    */
 208   3                  if (oldDivider == 0u)
 209   3                  {
 210   4                      /* Moving away from SSS, set the divider first so when SSS is cleared we    */
 211   4                      /* don't halt the clock.  Using the shadow load isn't required as the       */
 212   4                      /* divider is ignored while SSS is set.                                     */
 213   4                      CY_SET_REG16(UART_Servo_IntClock_DIV_PTR, clkDivider);
 214   4                      UART_Servo_IntClock_MOD_SRC &= (uint8)(~CYCLK_SSS);
 215   4                  }
 216   3                  else
 217   3                  {
 218   4                      /* Moving to SSS, set SSS which then ignores the divider and we can set     */
 219   4                      /* it without bothering with the shadow load.                               */
 220   4                      UART_Servo_IntClock_MOD_SRC |= CYCLK_SSS;
 221   4                      CY_SET_REG16(UART_Servo_IntClock_DIV_PTR, clkDivider);
 222   4                  }
 223   3              }
 224   2              else
 225   2              {
 226   3                              
 227   3                  if (enabled != 0u)
 228   3                  {
 229   4                      CLK_DIST_LD = 0x00u;
 230   4      
 231   4                      /* Clear all the mask bits except ours. */
 232   4      #if defined(UART_Servo_IntClock__CFG3)
                              CLK_DIST_AMASK = UART_Servo_IntClock_CLKEN_MASK;
                              CLK_DIST_DMASK = 0x00u;
              #else
 236   4                      CLK_DIST_DMASK = UART_Servo_IntClock_CLKEN_MASK;
 237   4                      CLK_DIST_AMASK = 0x00u;
 238   4      #endif /* UART_Servo_IntClock__CFG3 */
C51 COMPILER V9.51   UART_SERVO_INTCLOCK                                                   12/05/2015 15:02:21 PAGE 5   

 239   4                      /* Clear mask of bus clock. */
 240   4                      CLK_DIST_BCFG2 &= (uint8)(~BCFG2_MASK);
 241   4      
 242   4                      /* If clock is currently enabled, disable it if async or going from N-to-1*/
 243   4                      if (((UART_Servo_IntClock_MOD_SRC & CYCLK_SYNC) == 0u) || (clkDivider == 0u))
 244   4                      {
 245   5      #if HAS_CLKDIST_LD_DISABLE
 246   5                          CY_SET_REG16(CYREG_CLKDIST_WRK0, oldDivider);
 247   5                          CLK_DIST_LD = CYCLK_LD_DISABLE|CYCLK_LD_SYNC_EN|CYCLK_LD_LOAD;
 248   5      
 249   5                          /* Wait for clock to be disabled */
 250   5                          while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 251   5      #endif /* HAS_CLKDIST_LD_DISABLE */
 252   5      
 253   5                          UART_Servo_IntClock_CLKEN &= (uint8)(~UART_Servo_IntClock_CLKEN_MASK);
 254   5      
 255   5      #if HAS_CLKDIST_LD_DISABLE
 256   5                          /* Clear the disable bit */
 257   5                          CLK_DIST_LD = 0x00u;
 258   5      #endif /* HAS_CLKDIST_LD_DISABLE */
 259   5                      }
 260   4                  }
 261   3      
 262   3                  /* Load divide value. */
 263   3                  if ((UART_Servo_IntClock_CLKEN & UART_Servo_IntClock_CLKEN_MASK) != 0u)
 264   3                  {
 265   4                      /* If the clock is still enabled, use the shadow registers */
 266   4                      CY_SET_REG16(CYREG_CLKDIST_WRK0, clkDivider);
 267   4      
 268   4                      CLK_DIST_LD = (CYCLK_LD_LOAD | ((restart != 0u) ? CYCLK_LD_SYNC_EN : 0x00u));
 269   4                      while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 270   4                  }
 271   3                  else
 272   3                  {
 273   4                      /* If the clock is disabled, set the divider directly */
 274   4                      CY_SET_REG16(UART_Servo_IntClock_DIV_PTR, clkDivider);
 275   4                                      UART_Servo_IntClock_CLKEN |= enabled;
 276   4                  }
 277   3              }
 278   2          }
 279   1      }
 280          
 281          
 282          /*******************************************************************************
 283          * Function Name: UART_Servo_IntClock_GetDividerRegister
 284          ********************************************************************************
 285          *
 286          * Summary:
 287          *  Gets the clock divider register value.
 288          *
 289          * Parameters:
 290          *  None
 291          *
 292          * Returns:
 293          *  Divide value of the clock minus 1. For example, if the clock is set to
 294          *  divide by 2, the return value will be 1.
 295          *
 296          *******************************************************************************/
 297          uint16 UART_Servo_IntClock_GetDividerRegister(void) 
 298          {
 299   1          return CY_GET_REG16(UART_Servo_IntClock_DIV_PTR);
 300   1      }
C51 COMPILER V9.51   UART_SERVO_INTCLOCK                                                   12/05/2015 15:02:21 PAGE 6   

 301          
 302          
 303          /*******************************************************************************
 304          * Function Name: UART_Servo_IntClock_SetModeRegister
 305          ********************************************************************************
 306          *
 307          * Summary:
 308          *  Sets flags that control the operating mode of the clock. This function only
 309          *  changes flags from 0 to 1; flags that are already 1 will remain unchanged.
 310          *  To clear flags, use the ClearModeRegister function. The clock must be
 311          *  disabled before changing the mode.
 312          *
 313          * Parameters:
 314          *  clkMode: Bit mask containing the bits to set. For PSoC 3 and PSoC 5,
 315          *   clkMode should be a set of the following optional bits or'ed together.
 316          *   - CYCLK_EARLY Enable early phase mode. Rising edge of output clock will
 317          *                 occur when the divider count reaches half of the divide
 318          *                 value.
 319          *   - CYCLK_DUTY  Enable 50% duty cycle output. When enabled, the output clock
 320          *                 is asserted for approximately half of its period. When
 321          *                 disabled, the output clock is asserted for one period of the
 322          *                 source clock.
 323          *   - CYCLK_SYNC  Enable output synchronization to master clock. This should
 324          *                 be enabled for all synchronous clocks.
 325          *   See the Technical Reference Manual for details about setting the mode of
 326          *   the clock. Specifically, see the CLKDIST.DCFG.CFG2 register.
 327          *
 328          * Returns:
 329          *  None
 330          *
 331          *******************************************************************************/
 332          void UART_Servo_IntClock_SetModeRegister(uint8 modeBitMask) 
 333          {
 334   1          UART_Servo_IntClock_MOD_SRC |= modeBitMask & (uint8)UART_Servo_IntClock_MODE_MASK;
 335   1      }
 336          
 337          
 338          /*******************************************************************************
 339          * Function Name: UART_Servo_IntClock_ClearModeRegister
 340          ********************************************************************************
 341          *
 342          * Summary:
 343          *  Clears flags that control the operating mode of the clock. This function
 344          *  only changes flags from 1 to 0; flags that are already 0 will remain
 345          *  unchanged. To set flags, use the SetModeRegister function. The clock must be
 346          *  disabled before changing the mode.
 347          *
 348          * Parameters:
 349          *  clkMode: Bit mask containing the bits to clear. For PSoC 3 and PSoC 5,
 350          *   clkMode should be a set of the following optional bits or'ed together.
 351          *   - CYCLK_EARLY Enable early phase mode. Rising edge of output clock will
 352          *                 occur when the divider count reaches half of the divide
 353          *                 value.
 354          *   - CYCLK_DUTY  Enable 50% duty cycle output. When enabled, the output clock
 355          *                 is asserted for approximately half of its period. When
 356          *                 disabled, the output clock is asserted for one period of the
 357          *                 source clock.
 358          *   - CYCLK_SYNC  Enable output synchronization to master clock. This should
 359          *                 be enabled for all synchronous clocks.
 360          *   See the Technical Reference Manual for details about setting the mode of
 361          *   the clock. Specifically, see the CLKDIST.DCFG.CFG2 register.
 362          *
C51 COMPILER V9.51   UART_SERVO_INTCLOCK                                                   12/05/2015 15:02:21 PAGE 7   

 363          * Returns:
 364          *  None
 365          *
 366          *******************************************************************************/
 367          void UART_Servo_IntClock_ClearModeRegister(uint8 modeBitMask) 
 368          {
 369   1          UART_Servo_IntClock_MOD_SRC &= (uint8)(~modeBitMask) | (uint8)(~(uint8)(UART_Servo_IntClock_MODE_MASK)
             -);
 370   1      }
 371          
 372          
 373          /*******************************************************************************
 374          * Function Name: UART_Servo_IntClock_GetModeRegister
 375          ********************************************************************************
 376          *
 377          * Summary:
 378          *  Gets the clock mode register value.
 379          *
 380          * Parameters:
 381          *  None
 382          *
 383          * Returns:
 384          *  Bit mask representing the enabled mode bits. See the SetModeRegister and
 385          *  ClearModeRegister descriptions for details about the mode bits.
 386          *
 387          *******************************************************************************/
 388          uint8 UART_Servo_IntClock_GetModeRegister(void) 
 389          {
 390   1          return UART_Servo_IntClock_MOD_SRC & (uint8)(UART_Servo_IntClock_MODE_MASK);
 391   1      }
 392          
 393          
 394          /*******************************************************************************
 395          * Function Name: UART_Servo_IntClock_SetSourceRegister
 396          ********************************************************************************
 397          *
 398          * Summary:
 399          *  Sets the input source of the clock. The clock must be disabled before
 400          *  changing the source. The old and new clock sources must be running.
 401          *
 402          * Parameters:
 403          *  clkSource:  For PSoC 3 and PSoC 5 devices, clkSource should be one of the
 404          *   following input sources:
 405          *   - CYCLK_SRC_SEL_SYNC_DIG
 406          *   - CYCLK_SRC_SEL_IMO
 407          *   - CYCLK_SRC_SEL_XTALM
 408          *   - CYCLK_SRC_SEL_ILO
 409          *   - CYCLK_SRC_SEL_PLL
 410          *   - CYCLK_SRC_SEL_XTALK
 411          *   - CYCLK_SRC_SEL_DSI_G
 412          *   - CYCLK_SRC_SEL_DSI_D/CYCLK_SRC_SEL_DSI_A
 413          *   See the Technical Reference Manual for details on clock sources.
 414          *
 415          * Returns:
 416          *  None
 417          *
 418          *******************************************************************************/
 419          void UART_Servo_IntClock_SetSourceRegister(uint8 clkSource) 
 420          {
 421   1          uint16 currDiv = UART_Servo_IntClock_GetDividerRegister();
 422   1          uint8 oldSrc = UART_Servo_IntClock_GetSourceRegister();
 423   1      
C51 COMPILER V9.51   UART_SERVO_INTCLOCK                                                   12/05/2015 15:02:21 PAGE 8   

 424   1          if (((oldSrc != ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D)) && 
 425   1              (clkSource == ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D))) && (currDiv == 0u))
 426   1          {
 427   2              /* Switching to Master and divider is 1, set SSS, which will output master, */
 428   2              /* then set the source so we are consistent.                                */
 429   2              UART_Servo_IntClock_MOD_SRC |= CYCLK_SSS;
 430   2              UART_Servo_IntClock_MOD_SRC =
 431   2                  (UART_Servo_IntClock_MOD_SRC & (uint8)(~UART_Servo_IntClock_SRC_SEL_MSK)) | clkSource;
 432   2          }
 433   1          else if (((oldSrc == ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D)) && 
 434   1                  (clkSource != ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D))) && (currDiv == 0u))
 435   1          {
 436   2              /* Switching from Master to not and divider is 1, set source, so we don't   */
 437   2              /* lock when we clear SSS.                                                  */
 438   2              UART_Servo_IntClock_MOD_SRC =
 439   2                  (UART_Servo_IntClock_MOD_SRC & (uint8)(~UART_Servo_IntClock_SRC_SEL_MSK)) | clkSource;
 440   2              UART_Servo_IntClock_MOD_SRC &= (uint8)(~CYCLK_SSS);
 441   2          }
 442   1          else
 443   1          {
 444   2              UART_Servo_IntClock_MOD_SRC =
 445   2                  (UART_Servo_IntClock_MOD_SRC & (uint8)(~UART_Servo_IntClock_SRC_SEL_MSK)) | clkSource;
 446   2          }
 447   1      }
 448          
 449          
 450          /*******************************************************************************
 451          * Function Name: UART_Servo_IntClock_GetSourceRegister
 452          ********************************************************************************
 453          *
 454          * Summary:
 455          *  Gets the input source of the clock.
 456          *
 457          * Parameters:
 458          *  None
 459          *
 460          * Returns:
 461          *  The input source of the clock. See SetSourceRegister for details.
 462          *
 463          *******************************************************************************/
 464          uint8 UART_Servo_IntClock_GetSourceRegister(void) 
 465          {
 466   1          return UART_Servo_IntClock_MOD_SRC & UART_Servo_IntClock_SRC_SEL_MSK;
 467   1      }
 468          
 469          
 470          #if defined(UART_Servo_IntClock__CFG3)
              
              
              /*******************************************************************************
              * Function Name: UART_Servo_IntClock_SetPhaseRegister
              ********************************************************************************
              *
              * Summary:
              *  Sets the phase delay of the analog clock. This function is only available
              *  for analog clocks. The clock must be disabled before changing the phase
              *  delay to avoid glitches.
              *
              * Parameters:
              *  clkPhase: Amount to delay the phase of the clock, in 1.0ns increments.
              *   clkPhase must be from 1 to 11 inclusive. Other values, including 0,
              *   disable the clock. clkPhase = 1 produces a 0ns delay and clkPhase = 11 
C51 COMPILER V9.51   UART_SERVO_INTCLOCK                                                   12/05/2015 15:02:21 PAGE 9   

              *   produces a 10ns delay.
              *
              * Returns:
              *  None
              *
              *******************************************************************************/
              void UART_Servo_IntClock_SetPhaseRegister(uint8 clkPhase) 
              {
                  UART_Servo_IntClock_PHASE = clkPhase & UART_Servo_IntClock_PHASE_MASK;
              }
              
              
              /*******************************************************************************
              * Function Name: UART_Servo_IntClock_GetPhase
              ********************************************************************************
              *
              * Summary:
              *  Gets the phase delay of the analog clock. This function is only available
              *  for analog clocks.
              *
              * Parameters:
              *  None
              *
              * Returns:
              *  Phase of the analog clock. See SetPhaseRegister for details.
              *
              *******************************************************************************/
              uint8 UART_Servo_IntClock_GetPhaseRegister(void) 
              {
                  return UART_Servo_IntClock_PHASE & UART_Servo_IntClock_PHASE_MASK;
              }
              
              #endif /* UART_Servo_IntClock__CFG3 */
 519          
 520          
 521          /* [] END OF FILE */
C51 COMPILER V9.51   UART_SERVO_INTCLOCK                                                   12/05/2015 15:02:21 PAGE 10  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION UART_Servo_IntClock_Start (BEGIN)
                                           ; SOURCE LINE # 45
                                           ; SOURCE LINE # 46
                                           ; SOURCE LINE # 48
0000 9043A2            MOV     DPTR,#043A2H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4401              ORL     A,#01H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 49
000B 9043B2            MOV     DPTR,#043B2H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 4401              ORL     A,#01H
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 50
0016 22                RET     
             ; FUNCTION UART_Servo_IntClock_Start (END)

             ; FUNCTION UART_Servo_IntClock_Stop (BEGIN)
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 74
0000 9043A2            MOV     DPTR,#043A2H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 75
000B 9043B2            MOV     DPTR,#043B2H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54FE              ANL     A,#0FEH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 76
0016 22                RET     
             ; FUNCTION UART_Servo_IntClock_Stop (END)

             ; FUNCTION UART_Servo_IntClock_StopBlock (BEGIN)
                                           ; SOURCE LINE # 100
                                           ; SOURCE LINE # 101
                                           ; SOURCE LINE # 102
0000 9043A2            MOV     DPTR,#043A2H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5401              ANL     A,#01H
C51 COMPILER V9.51   UART_SERVO_INTCLOCK                                                   12/05/2015 15:02:21 PAGE 11  

0008 FF                MOV     R7,A
0009 7E00              MOV     R6,#00H
000B EF                MOV     A,R7
000C 4E                ORL     A,R6
000D 607E              JZ      ?C0006
                                           ; SOURCE LINE # 103
                                           ; SOURCE LINE # 107
000F 904001            MOV     DPTR,#04001H
0012 E4                CLR     A
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 114
0014 904010            MOV     DPTR,#04010H
0017 7401              MOV     A,#01H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 115
001A 904014            MOV     DPTR,#04014H
001D E4                CLR     A
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 119
001F 904008            MOV     DPTR,#04008H
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 EF                MOV     A,R7
0025 547F              ANL     A,#07FH
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 121
002A 7B02              MOV     R3,#02H
002C 7A40              MOV     R2,#040H
002E 7980              MOV     R1,#080H
0030 120000      E     LCALL   _cyread16_nodpx
0033 900000      R     MOV     DPTR,#oldDivider
0036 EE                MOV     A,R6
0037 F0                MOVX    @DPTR,A
0038 A3                INC     DPTR
0039 EF                MOV     A,R7
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 122
003B 7B02              MOV     R3,#02H
003D 7A40              MOV     R2,#040H
003F 7902              MOV     R1,#02H
0041 900000      R     MOV     DPTR,#oldDivider
0044 E0                MOVX    A,@DPTR
0045 FC                MOV     R4,A
0046 A3                INC     DPTR
0047 E0                MOVX    A,@DPTR
0048 FD                MOV     R5,A
0049 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 123
004C 904001            MOV     DPTR,#04001H
004F 7407              MOV     A,#07H
0051 F0                MOVX    @DPTR,A
0052         ?C0004:
                                           ; SOURCE LINE # 126
0052 904001            MOV     DPTR,#04001H
0055 E0                MOVX    A,@DPTR
0056 FF                MOV     R7,A
0057 EF                MOV     A,R7
0058 5401              ANL     A,#01H
005A FF                MOV     R7,A
005B 7E00              MOV     R6,#00H
C51 COMPILER V9.51   UART_SERVO_INTCLOCK                                                   12/05/2015 15:02:21 PAGE 12  

005D EF                MOV     A,R7
005E 4E                ORL     A,R6
005F 70F1              JNZ     ?C0004
0061         ?C0005:
                                           ; SOURCE LINE # 130
0061 9043A2            MOV     DPTR,#043A2H
0064 E0                MOVX    A,@DPTR
0065 FF                MOV     R7,A
0066 EF                MOV     A,R7
0067 54FE              ANL     A,#0FEH
0069 FF                MOV     R7,A
006A EF                MOV     A,R7
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 131
006C 9043B2            MOV     DPTR,#043B2H
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 EF                MOV     A,R7
0072 54FE              ANL     A,#0FEH
0074 FF                MOV     R7,A
0075 EF                MOV     A,R7
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 135
0077 904001            MOV     DPTR,#04001H
007A E4                CLR     A
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 136
007C 7B02              MOV     R3,#02H
007E 7A40              MOV     R2,#040H
0080 7980              MOV     R1,#080H
0082 900000      R     MOV     DPTR,#oldDivider
0085 E0                MOVX    A,@DPTR
0086 FC                MOV     R4,A
0087 A3                INC     DPTR
0088 E0                MOVX    A,@DPTR
0089 FD                MOV     R5,A
008A 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 139
008D         ?C0006:
008D 22                RET     
             ; FUNCTION UART_Servo_IntClock_StopBlock (END)

             ; FUNCTION _UART_Servo_IntClock_StandbyPower (BEGIN)
                                           ; SOURCE LINE # 157
0000 900000      R     MOV     DPTR,#state
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 158
                                           ; SOURCE LINE # 159
0005 900000      R     MOV     DPTR,#state
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 700C              JNZ     ?C0007
                                           ; SOURCE LINE # 160
                                           ; SOURCE LINE # 161
000D 9043B2            MOV     DPTR,#043B2H
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 EF                MOV     A,R7
0013 54FE              ANL     A,#0FEH
C51 COMPILER V9.51   UART_SERVO_INTCLOCK                                                   12/05/2015 15:02:21 PAGE 13  

0015 FF                MOV     R7,A
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 162
0018 22                RET     
0019         ?C0007:
                                           ; SOURCE LINE # 164
                                           ; SOURCE LINE # 165
0019 9043B2            MOV     DPTR,#043B2H
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E EF                MOV     A,R7
001F 4401              ORL     A,#01H
0021 FF                MOV     R7,A
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 166
                                           ; SOURCE LINE # 167
0024         ?C0009:
0024 22                RET     
             ; FUNCTION _UART_Servo_IntClock_StandbyPower (END)

             ; FUNCTION _UART_Servo_IntClock_SetDividerRegister (BEGIN)
                                           ; SOURCE LINE # 193
0000 900000      R     MOV     DPTR,#clkDivider
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#restart
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 195
                                           ; SOURCE LINE # 198
000D 120000      R     LCALL   UART_Servo_IntClock_GetSourceRegister
0010 900000      R     MOV     DPTR,#currSrc
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 199
0015 120000      R     LCALL   UART_Servo_IntClock_GetDividerRegister
0018 900000      R     MOV     DPTR,#oldDivider
001B EE                MOV     A,R6
001C F0                MOVX    @DPTR,A
001D A3                INC     DPTR
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 201
0020 900000      R     MOV     DPTR,#oldDivider
0023 E0                MOVX    A,@DPTR
0024 FE                MOV     R6,A
0025 A3                INC     DPTR
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 900000      R     MOV     DPTR,#clkDivider
002B E0                MOVX    A,@DPTR
002C FC                MOV     R4,A
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FD                MOV     R5,A
0030 ED                MOV     A,R5
0031 6F                XRL     A,R7
C51 COMPILER V9.51   UART_SERVO_INTCLOCK                                                   12/05/2015 15:02:21 PAGE 14  

0032 7002              JNZ     ?C0038
0034 EC                MOV     A,R4
0035 6E                XRL     A,R6
0036         ?C0038:
0036 7003              JNZ     $ + 5H
0038 020000      R     LJMP    ?C0027
                                           ; SOURCE LINE # 202
                                           ; SOURCE LINE # 203
003B 9043A2            MOV     DPTR,#043A2H
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 EF                MOV     A,R7
0041 5401              ANL     A,#01H
0043 FF                MOV     R7,A
0044 900000      R     MOV     DPTR,#enabled
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 205
0049 900000      R     MOV     DPTR,#currSrc
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E EF                MOV     A,R7
004F 705E              JNZ     ?C0011
0051 900000      R     MOV     DPTR,#oldDivider
0054 E0                MOVX    A,@DPTR
0055 FE                MOV     R6,A
0056 A3                INC     DPTR
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
0059 EF                MOV     A,R7
005A 4E                ORL     A,R6
005B 600C              JZ      ?C0012
005D 900000      R     MOV     DPTR,#clkDivider
0060 E0                MOVX    A,@DPTR
0061 FE                MOV     R6,A
0062 A3                INC     DPTR
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 EF                MOV     A,R7
0066 4E                ORL     A,R6
0067 7046              JNZ     ?C0011
0069         ?C0012:
                                           ; SOURCE LINE # 206
                                           ; SOURCE LINE # 208
0069 900000      R     MOV     DPTR,#oldDivider
006C E0                MOVX    A,@DPTR
006D FE                MOV     R6,A
006E A3                INC     DPTR
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 EF                MOV     A,R7
0072 4E                ORL     A,R6
0073 701D              JNZ     ?C0013
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 213
0075 7B02              MOV     R3,#02H
0077 7A40              MOV     R2,#040H
0079 7980              MOV     R1,#080H
007B 900000      R     MOV     DPTR,#clkDivider
007E E0                MOVX    A,@DPTR
007F FC                MOV     R4,A
0080 A3                INC     DPTR
C51 COMPILER V9.51   UART_SERVO_INTCLOCK                                                   12/05/2015 15:02:21 PAGE 15  

0081 E0                MOVX    A,@DPTR
0082 FD                MOV     R5,A
0083 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 214
0086 904082            MOV     DPTR,#04082H
0089 E0                MOVX    A,@DPTR
008A FF                MOV     R7,A
008B EF                MOV     A,R7
008C 54BF              ANL     A,#0BFH
008E FF                MOV     R7,A
008F EF                MOV     A,R7
0090 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 215
0091 22                RET     
0092         ?C0013:
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 220
0092 904082            MOV     DPTR,#04082H
0095 E0                MOVX    A,@DPTR
0096 FF                MOV     R7,A
0097 EF                MOV     A,R7
0098 4440              ORL     A,#040H
009A FF                MOV     R7,A
009B EF                MOV     A,R7
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 221
009D 7B02              MOV     R3,#02H
009F 7A40              MOV     R2,#040H
00A1 7980              MOV     R1,#080H
00A3 900000      R     MOV     DPTR,#clkDivider
00A6 E0                MOVX    A,@DPTR
00A7 FC                MOV     R4,A
00A8 A3                INC     DPTR
00A9 E0                MOVX    A,@DPTR
00AA FD                MOV     R5,A
00AB 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 222
                                           ; SOURCE LINE # 223
00AE 22                RET     
00AF         ?C0011:
                                           ; SOURCE LINE # 225
                                           ; SOURCE LINE # 227
00AF 900000      R     MOV     DPTR,#enabled
00B2 E0                MOVX    A,@DPTR
00B3 FF                MOV     R7,A
00B4 EF                MOV     A,R7
00B5 606C              JZ      ?C0016
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 229
00B7 904001            MOV     DPTR,#04001H
00BA E4                CLR     A
00BB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 236
00BC 904010            MOV     DPTR,#04010H
00BF 7401              MOV     A,#01H
00C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 237
00C2 904014            MOV     DPTR,#04014H
00C5 E4                CLR     A
00C6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 240
00C7 904008            MOV     DPTR,#04008H
C51 COMPILER V9.51   UART_SERVO_INTCLOCK                                                   12/05/2015 15:02:21 PAGE 16  

00CA E0                MOVX    A,@DPTR
00CB FF                MOV     R7,A
00CC EF                MOV     A,R7
00CD 547F              ANL     A,#07FH
00CF FF                MOV     R7,A
00D0 EF                MOV     A,R7
00D1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 243
00D2 904082            MOV     DPTR,#04082H
00D5 E0                MOVX    A,@DPTR
00D6 FF                MOV     R7,A
00D7 EF                MOV     A,R7
00D8 5408              ANL     A,#08H
00DA FF                MOV     R7,A
00DB 7E00              MOV     R6,#00H
00DD EF                MOV     A,R7
00DE 4E                ORL     A,R6
00DF 600C              JZ      ?C0018
00E1 900000      R     MOV     DPTR,#clkDivider
00E4 E0                MOVX    A,@DPTR
00E5 FE                MOV     R6,A
00E6 A3                INC     DPTR
00E7 E0                MOVX    A,@DPTR
00E8 FF                MOV     R7,A
00E9 EF                MOV     A,R7
00EA 4E                ORL     A,R6
00EB 7036              JNZ     ?C0016
00ED         ?C0018:
                                           ; SOURCE LINE # 244
                                           ; SOURCE LINE # 246
00ED 7B02              MOV     R3,#02H
00EF 7A40              MOV     R2,#040H
00F1 7902              MOV     R1,#02H
00F3 900000      R     MOV     DPTR,#oldDivider
00F6 E0                MOVX    A,@DPTR
00F7 FC                MOV     R4,A
00F8 A3                INC     DPTR
00F9 E0                MOVX    A,@DPTR
00FA FD                MOV     R5,A
00FB 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 247
00FE 904001            MOV     DPTR,#04001H
0101 7407              MOV     A,#07H
0103 F0                MOVX    @DPTR,A
0104         ?C0019:
                                           ; SOURCE LINE # 250
0104 904001            MOV     DPTR,#04001H
0107 E0                MOVX    A,@DPTR
0108 FF                MOV     R7,A
0109 EF                MOV     A,R7
010A 5401              ANL     A,#01H
010C FF                MOV     R7,A
010D 7E00              MOV     R6,#00H
010F EF                MOV     A,R7
0110 4E                ORL     A,R6
0111 70F1              JNZ     ?C0019
0113         ?C0020:
                                           ; SOURCE LINE # 253
0113 9043A2            MOV     DPTR,#043A2H
0116 E0                MOVX    A,@DPTR
0117 FF                MOV     R7,A
0118 EF                MOV     A,R7
C51 COMPILER V9.51   UART_SERVO_INTCLOCK                                                   12/05/2015 15:02:21 PAGE 17  

0119 54FE              ANL     A,#0FEH
011B FF                MOV     R7,A
011C EF                MOV     A,R7
011D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 257
011E 904001            MOV     DPTR,#04001H
0121 E4                CLR     A
0122 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 259
                                           ; SOURCE LINE # 260
0123         ?C0016:
                                           ; SOURCE LINE # 263
0123 9043A2            MOV     DPTR,#043A2H
0126 E0                MOVX    A,@DPTR
0127 FF                MOV     R7,A
0128 EF                MOV     A,R7
0129 5401              ANL     A,#01H
012B FF                MOV     R7,A
012C 7E00              MOV     R6,#00H
012E EF                MOV     A,R7
012F 4E                ORL     A,R6
0130 603A              JZ      ?C0021
                                           ; SOURCE LINE # 264
                                           ; SOURCE LINE # 266
0132 7B02              MOV     R3,#02H
0134 7A40              MOV     R2,#040H
0136 7902              MOV     R1,#02H
0138 900000      R     MOV     DPTR,#clkDivider
013B E0                MOVX    A,@DPTR
013C FC                MOV     R4,A
013D A3                INC     DPTR
013E E0                MOVX    A,@DPTR
013F FD                MOV     R5,A
0140 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 268
0143 900000      R     MOV     DPTR,#restart
0146 E0                MOVX    A,@DPTR
0147 FF                MOV     R7,A
0148 EF                MOV     A,R7
0149 6004              JZ      ?C0022
014B 7F02              MOV     R7,#02H
014D 8002              SJMP    ?C0023
014F         ?C0022:
014F 7F00              MOV     R7,#00H
0151         ?C0023:
0151 EF                MOV     A,R7
0152 4401              ORL     A,#01H
0154 FF                MOV     R7,A
0155 904001            MOV     DPTR,#04001H
0158 EF                MOV     A,R7
0159 F0                MOVX    @DPTR,A
015A         ?C0024:
                                           ; SOURCE LINE # 269
015A 904001            MOV     DPTR,#04001H
015D E0                MOVX    A,@DPTR
015E FF                MOV     R7,A
015F EF                MOV     A,R7
0160 5401              ANL     A,#01H
0162 FF                MOV     R7,A
0163 7E00              MOV     R6,#00H
0165 EF                MOV     A,R7
0166 4E                ORL     A,R6
C51 COMPILER V9.51   UART_SERVO_INTCLOCK                                                   12/05/2015 15:02:21 PAGE 18  

0167 602B              JZ      ?C0027
0169 80EF              SJMP    ?C0024
016B         ?C0025:
                                           ; SOURCE LINE # 270
016B 22                RET     
016C         ?C0021:
                                           ; SOURCE LINE # 272
                                           ; SOURCE LINE # 274
016C 7B02              MOV     R3,#02H
016E 7A40              MOV     R2,#040H
0170 7980              MOV     R1,#080H
0172 900000      R     MOV     DPTR,#clkDivider
0175 E0                MOVX    A,@DPTR
0176 FC                MOV     R4,A
0177 A3                INC     DPTR
0178 E0                MOVX    A,@DPTR
0179 FD                MOV     R5,A
017A 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 275
017D 9043A2            MOV     DPTR,#043A2H
0180 C083              PUSH    DPH
0182 C082              PUSH    DPL
0184 E0                MOVX    A,@DPTR
0185 FF                MOV     R7,A
0186 900000      R     MOV     DPTR,#enabled
0189 E0                MOVX    A,@DPTR
018A FE                MOV     R6,A
018B EF                MOV     A,R7
018C 4E                ORL     A,R6
018D FF                MOV     R7,A
018E D082              POP     DPL
0190 D083              POP     DPH
0192 EF                MOV     A,R7
0193 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 276
                                           ; SOURCE LINE # 277
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 279
0194         ?C0027:
0194 22                RET     
             ; FUNCTION _UART_Servo_IntClock_SetDividerRegister (END)

             ; FUNCTION UART_Servo_IntClock_GetDividerRegister (BEGIN)
                                           ; SOURCE LINE # 297
                                           ; SOURCE LINE # 298
                                           ; SOURCE LINE # 299
0000 7B02              MOV     R3,#02H
0002 7A40              MOV     R2,#040H
0004 7980              MOV     R1,#080H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 300
0009         ?C0028:
0009 22                RET     
             ; FUNCTION UART_Servo_IntClock_GetDividerRegister (END)

             ; FUNCTION _UART_Servo_IntClock_SetModeRegister (BEGIN)
                                           ; SOURCE LINE # 332
0000 900000      R     MOV     DPTR,#modeBitMask
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 333
                                           ; SOURCE LINE # 334
C51 COMPILER V9.51   UART_SERVO_INTCLOCK                                                   12/05/2015 15:02:21 PAGE 19  

0005 904082            MOV     DPTR,#04082H
0008 C083              PUSH    DPH
000A C082              PUSH    DPL
000C E0                MOVX    A,@DPTR
000D FF                MOV     R7,A
000E 900000      R     MOV     DPTR,#modeBitMask
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 EE                MOV     A,R6
0014 54F8              ANL     A,#0F8H
0016 FE                MOV     R6,A
0017 EF                MOV     A,R7
0018 4E                ORL     A,R6
0019 FF                MOV     R7,A
001A D082              POP     DPL
001C D083              POP     DPH
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 335
0020 22                RET     
             ; FUNCTION _UART_Servo_IntClock_SetModeRegister (END)

             ; FUNCTION _UART_Servo_IntClock_ClearModeRegister (BEGIN)
                                           ; SOURCE LINE # 367
0000 900000      R     MOV     DPTR,#modeBitMask
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 368
                                           ; SOURCE LINE # 369
0005 904082            MOV     DPTR,#04082H
0008 C083              PUSH    DPH
000A C082              PUSH    DPL
000C E0                MOVX    A,@DPTR
000D FF                MOV     R7,A
000E 900000      R     MOV     DPTR,#modeBitMask
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 EE                MOV     A,R6
0014 F4                CPL     A
0015 FE                MOV     R6,A
0016 EE                MOV     A,R6
0017 4407              ORL     A,#07H
0019 FE                MOV     R6,A
001A EF                MOV     A,R7
001B 5E                ANL     A,R6
001C FF                MOV     R7,A
001D D082              POP     DPL
001F D083              POP     DPH
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 370
0023 22                RET     
             ; FUNCTION _UART_Servo_IntClock_ClearModeRegister (END)

             ; FUNCTION UART_Servo_IntClock_GetModeRegister (BEGIN)
                                           ; SOURCE LINE # 388
                                           ; SOURCE LINE # 389
                                           ; SOURCE LINE # 390
0000 904082            MOV     DPTR,#04082H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
C51 COMPILER V9.51   UART_SERVO_INTCLOCK                                                   12/05/2015 15:02:21 PAGE 20  

0006 54F8              ANL     A,#0F8H
0008 FF                MOV     R7,A
                                           ; SOURCE LINE # 391
0009         ?C0031:
0009 22                RET     
             ; FUNCTION UART_Servo_IntClock_GetModeRegister (END)

             ; FUNCTION _UART_Servo_IntClock_SetSourceRegister (BEGIN)
                                           ; SOURCE LINE # 419
0000 900000      R     MOV     DPTR,#clkSource
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 420
                                           ; SOURCE LINE # 421
0005 120000      R     LCALL   UART_Servo_IntClock_GetDividerRegister
0008 900000      R     MOV     DPTR,#currDiv
000B EE                MOV     A,R6
000C F0                MOVX    @DPTR,A
000D A3                INC     DPTR
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 422
0010 120000      R     LCALL   UART_Servo_IntClock_GetSourceRegister
0013 900000      R     MOV     DPTR,#oldSrc
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 425
0018 900000      R     MOV     DPTR,#oldSrc
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 6036              JZ      ?C0032
0020 900000      R     MOV     DPTR,#clkSource
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
0025 EF                MOV     A,R7
0026 702E              JNZ     ?C0032
0028 900000      R     MOV     DPTR,#currDiv
002B E0                MOVX    A,@DPTR
002C FE                MOV     R6,A
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 EF                MOV     A,R7
0031 4E                ORL     A,R6
0032 7022              JNZ     ?C0032
                                           ; SOURCE LINE # 426
                                           ; SOURCE LINE # 429
0034 904082            MOV     DPTR,#04082H
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 EF                MOV     A,R7
003A 4440              ORL     A,#040H
003C FF                MOV     R7,A
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 431
003F 904082            MOV     DPTR,#04082H
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 EF                MOV     A,R7
0045 54F8              ANL     A,#0F8H
C51 COMPILER V9.51   UART_SERVO_INTCLOCK                                                   12/05/2015 15:02:21 PAGE 21  

0047 FF                MOV     R7,A
0048 900000      R     MOV     DPTR,#clkSource
004B E0                MOVX    A,@DPTR
004C FE                MOV     R6,A
004D EF                MOV     A,R7
004E 4E                ORL     A,R6
004F FF                MOV     R7,A
0050 904082            MOV     DPTR,#04082H
0053 EF                MOV     A,R7
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 432
0055 22                RET     
0056         ?C0032:
                                           ; SOURCE LINE # 434
0056 900000      R     MOV     DPTR,#oldSrc
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
005B EF                MOV     A,R7
005C 7036              JNZ     ?C0034
005E 900000      R     MOV     DPTR,#clkSource
0061 E0                MOVX    A,@DPTR
0062 FF                MOV     R7,A
0063 EF                MOV     A,R7
0064 602E              JZ      ?C0034
0066 900000      R     MOV     DPTR,#currDiv
0069 E0                MOVX    A,@DPTR
006A FE                MOV     R6,A
006B A3                INC     DPTR
006C E0                MOVX    A,@DPTR
006D FF                MOV     R7,A
006E EF                MOV     A,R7
006F 4E                ORL     A,R6
0070 7022              JNZ     ?C0034
                                           ; SOURCE LINE # 435
                                           ; SOURCE LINE # 439
0072 904082            MOV     DPTR,#04082H
0075 E0                MOVX    A,@DPTR
0076 FF                MOV     R7,A
0077 EF                MOV     A,R7
0078 54F8              ANL     A,#0F8H
007A FF                MOV     R7,A
007B 900000      R     MOV     DPTR,#clkSource
007E E0                MOVX    A,@DPTR
007F FE                MOV     R6,A
0080 EF                MOV     A,R7
0081 4E                ORL     A,R6
0082 FF                MOV     R7,A
0083 904082            MOV     DPTR,#04082H
0086 EF                MOV     A,R7
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 440
0088 904082            MOV     DPTR,#04082H
008B E0                MOVX    A,@DPTR
008C FF                MOV     R7,A
008D EF                MOV     A,R7
008E 54BF              ANL     A,#0BFH
0090 FF                MOV     R7,A
0091 EF                MOV     A,R7
0092 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 441
0093 22                RET     
0094         ?C0034:
C51 COMPILER V9.51   UART_SERVO_INTCLOCK                                                   12/05/2015 15:02:21 PAGE 22  

                                           ; SOURCE LINE # 443
                                           ; SOURCE LINE # 445
0094 904082            MOV     DPTR,#04082H
0097 E0                MOVX    A,@DPTR
0098 FF                MOV     R7,A
0099 EF                MOV     A,R7
009A 54F8              ANL     A,#0F8H
009C FF                MOV     R7,A
009D 900000      R     MOV     DPTR,#clkSource
00A0 E0                MOVX    A,@DPTR
00A1 FE                MOV     R6,A
00A2 EF                MOV     A,R7
00A3 4E                ORL     A,R6
00A4 FF                MOV     R7,A
00A5 904082            MOV     DPTR,#04082H
00A8 EF                MOV     A,R7
00A9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 446
                                           ; SOURCE LINE # 447
00AA         ?C0036:
00AA 22                RET     
             ; FUNCTION _UART_Servo_IntClock_SetSourceRegister (END)

             ; FUNCTION UART_Servo_IntClock_GetSourceRegister (BEGIN)
                                           ; SOURCE LINE # 464
                                           ; SOURCE LINE # 465
                                           ; SOURCE LINE # 466
0000 904082            MOV     DPTR,#04082H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5407              ANL     A,#07H
0008 FF                MOV     R7,A
                                           ; SOURCE LINE # 467
0009         ?C0037:
0009 22                RET     
             ; FUNCTION UART_Servo_IntClock_GetSourceRegister (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    900    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      16
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
