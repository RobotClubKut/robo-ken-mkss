C51 COMPILER V9.51   UART_DEBUG_BOOT                                                       12/03/2015 21:05:12 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE UART_DEBUG_BOOT
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\UART_Debug_BOOT.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\UART_Debug_BOOT.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB D
                    -F(DEBUG) WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/UART_Debug_BOOT.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\UA
                    -RT_Debug_BOOT.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: UART_Debug_BOOT.c
   3          * Version 2.50
   4          *
   5          * Description:
   6          *  This file provides the source code of bootloader communication APIs for the
   7          *  UART component.
   8          *
   9          * Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions,
  14          * disclaimers, and limitations in the end user license agreement accompanying
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include "UART_Debug.h"
  19          
  20          #if defined(CYDEV_BOOTLOADER_IO_COMP) && (0u != ((CYDEV_BOOTLOADER_IO_COMP == CyBtldr_UART_Debug) || \
  21                                                    (CYDEV_BOOTLOADER_IO_COMP == CyBtldr_Custom_Interface)))
              
              
              /*******************************************************************************
              * Function Name: UART_Debug_CyBtldrCommStart
              ********************************************************************************
              *
              * Summary:
              *  Starts the UART communication component.
              *
              * Parameters:
              *  None
              *
              * Return:
              *  None
              *
              * Side Effects:
              *  This component automatically enables global interrupt.
              *
              *******************************************************************************/
              void UART_Debug_CyBtldrCommStart(void) CYSMALL 
              {
                  /* Start UART component and clear the Tx,Rx buffers */
                  UART_Debug_Start();
                  UART_Debug_ClearRxBuffer();
                  UART_Debug_ClearTxBuffer();
              }
              
              
              /*******************************************************************************
              * Function Name: UART_Debug_CyBtldrCommStop
              ********************************************************************************
C51 COMPILER V9.51   UART_DEBUG_BOOT                                                       12/03/2015 21:05:12 PAGE 2   

              *
              * Summary:
              *  Disables the communication component and disables the interrupt.
              *
              * Parameters:
              *  None
              *
              * Return:
              *  None
              *
              *******************************************************************************/
              void UART_Debug_CyBtldrCommStop(void) CYSMALL 
              {
                  /* Stop UART component */
                  UART_Debug_Stop();
              }
              
              
              /*******************************************************************************
              * Function Name: UART_Debug_CyBtldrCommReset
              ********************************************************************************
              *
              * Summary:
              *  Resets the receive and transmit communication Buffers.
              *
              * Parameters:
              *  None
              *
              * Return:
              *  None
              *
              *******************************************************************************/
              void UART_Debug_CyBtldrCommReset(void) CYSMALL 
              {
                  /* Clear RX and TX buffers */
                  UART_Debug_ClearRxBuffer();
                  UART_Debug_ClearTxBuffer();
              }
              
              
              /*******************************************************************************
              * Function Name: UART_Debug_CyBtldrCommWrite
              ********************************************************************************
              *
              * Summary:
              *  Allows the caller to write data to the boot loader host. This function uses
              * a blocking write function for writing data using UART communication component.
              *
              * Parameters:
              *  pData:    A pointer to the block of data to send to the device
              *  size:     The number of bytes to write.
              *  count:    Pointer to an unsigned short variable to write the number of
              *             bytes actually written.
              *  timeOut:  Number of units to wait before returning because of a timeout.
              *
              * Return:
              *   cystatus: This function will return CYRET_SUCCESS if data is sent
              *             successfully.
              *
              * Side Effects:
              *  This function should be called after command was received .
              *
C51 COMPILER V9.51   UART_DEBUG_BOOT                                                       12/03/2015 21:05:12 PAGE 3   

              *******************************************************************************/
              cystatus UART_Debug_CyBtldrCommWrite(const uint8 pData[], uint16 size, uint16 * count, uint8 timeOut) CYSM
             -ALL
                       
              {
                  uint16 bufIndex = 0u;
              
                  if(0u != timeOut)
                  {
                      /* Suppress compiler warning */
                  }
              
                  /* Clear receive buffers */
                  UART_Debug_ClearRxBuffer();
              
                  /* Write TX data using blocking function */
                  while(bufIndex < size)
                  {
                      UART_Debug_PutChar(pData[bufIndex]);
                      bufIndex++;
                  }
              
                  /* Return success code */
                  *count = size;
              
                  return (CYRET_SUCCESS);
              }
              
              
              /*******************************************************************************
              * Function Name: UART_Debug_CyBtldrCommRead
              ********************************************************************************
              *
              * Summary:
              *  Receives the command.
              *
              * Parameters:
              *  pData:    A pointer to the area to store the block of data received
              *             from the device.
              *  size:     Maximum size of the read buffer
              *  count:    Pointer to an unsigned short variable to write the number
              *             of bytes actually read.
              *  timeOut:  Number of units to wait before returning because of a timeOut.
              *            Time out is measured in 10s of ms.
              *
              * Return:
              *  cystatus: This function will return CYRET_SUCCESS if at least one byte is
              *            received successfully within the time out interval. If no data is
              *            received  this function will return CYRET_EMPTY.
              *
              *  BYTE2BYTE_TIME_OUT is used for detecting time out marking end of block data
              *  from host. This has to be set to a value which is greater than the expected
              *  maximum delay between two bytes during a block/packet transmission from the
              *  host. You have to account for the delay in hardware converters while
              *  calculating this value, if you are using any USB-UART bridges.
              *******************************************************************************/
              cystatus UART_Debug_CyBtldrCommRead(uint8 pData[], uint16 size, uint16 * count, uint8 timeOut) CYSMALL
                       
              {
                  uint16 iCntr;
                  uint16 dataIndexCntr;
                  uint16 tempCount;
C51 COMPILER V9.51   UART_DEBUG_BOOT                                                       12/03/2015 21:05:12 PAGE 4   

                  uint16 oldDataCount;
              
                  cystatus status = CYRET_EMPTY;
              
                  /* Check whether data is received within the time out period.
                  *  Time out period is in units of 10ms.
                  *  If at least one byte is received within the time out interval, wait for more data */
                  for (iCntr = 0u; iCntr < ((uint16)10u * timeOut); iCntr++)
                  {
                      /* If at least one byte is received within the timeout interval
                      *  enter the next loop waiting for more data reception
                      */
                      if(0u != UART_Debug_GetRxBufferSize())
                      {
                          /* Wait for more data until 25ms byte to byte time out interval.
                          * If no data is received during the last 25 ms(BYTE2BYTE_TIME_OUT)
                          * then it is considered as end of transmitted data block(packet)
                          * from the host and the program execution will break from the
                          * data awaiting loop with status=CYRET_SUCCESS
                          */
                          do
                          {
                              oldDataCount = UART_Debug_GetRxBufferSize();
                              CyDelay(UART_Debug_BYTE2BYTE_TIME_OUT);
                          }
                          while(UART_Debug_GetRxBufferSize() > oldDataCount);
              
                          status = CYRET_SUCCESS;
                          break;
                      }
                      /* If the data is not received, give a delay of 
                      *  UART_Debug_BL_CHK_DELAY_MS and check again until the timeOut specified.
                      */
                      else
                      {
                          CyDelay(UART_Debug_BL_CHK_DELAY_MS);
                      }
                  }
              
                  /* Initialize the data read indexes and Count value */
                  *count = 0u;
                  dataIndexCntr = 0u;
              
                  /* If GetRxBufferSize()>0 , move the received data to the pData buffer */
                  while(UART_Debug_GetRxBufferSize() > 0u)
                  {
                      tempCount = UART_Debug_GetRxBufferSize();
                      *count  =(*count) + tempCount;
              
                      /* Check if buffer overflow will occur before moving the data */
                      if(*count < size)
                      {
                          for (iCntr = 0u; iCntr < tempCount; iCntr++)
                          {
                              /* Read the data and move it to the pData buffer */
                              pData[dataIndexCntr] = UART_Debug_ReadRxData();
                              dataIndexCntr++;
                          }
              
                          /* Check if the last received byte is end of packet defined by bootloader
                          *  If not wait for additional UART_Debug_WAIT_EOP_DELAY ms.
                          */
C51 COMPILER V9.51   UART_DEBUG_BOOT                                                       12/03/2015 21:05:12 PAGE 5   

                          if(pData[dataIndexCntr - 1u] != UART_Debug_PACKET_EOP)
                          {
                              CyDelay(UART_Debug_WAIT_EOP_DELAY);
                          }
                      }
                      /* If there is no space to move data, break from the loop */
                      else
                      {
                          *count = (*count) - tempCount;
                          break;
                      }
                  }
              
                  return (status);
              }
              
              #endif /* end CYDEV_BOOTLOADER_IO_COMP */
 255          
 256          
 257          /* [] END OF FILE */
C51 COMPILER V9.51   UART_DEBUG_BOOT                                                       12/03/2015 21:05:12 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE




MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
